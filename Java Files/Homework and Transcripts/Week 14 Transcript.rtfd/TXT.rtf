{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fmodern\fcharset0 Courier-Bold;\f2\fmodern\fcharset0 Courier-BoldOblique;
\f3\fmodern\fcharset0 Courier;\f4\fmodern\fcharset0 Courier-Oblique;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red251\green0\blue7;\red115\green0\blue2;
\red18\green139\blue2;\red0\green0\blue83;\red1\green32\blue135;\red43\green139\blue39;\red83\green83\blue83;
\red11\green85\blue38;\red190\green74\blue193;\red0\green0\blue255;\red0\green0\blue135;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs26 \cf2 dkneezel
\b0 \cf0  
\fs20 7:33:10 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Before we get started, I have an announcement about the Week 13 homework.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:33:51 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Week 13 Problem 1a turned out not to be quite fair because it required you to know how toString for the AList class was defined and we didn't discuss it last week.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:34:43 pm
\fs26 \
\pard\pardeftab720

\b \cf0 I've decided to address this by erasing the records about Problem 1a for anyone who didn't get a 7 on it already and we'll just ask it again this week.
\b0 \
\pard\pardeftab720
\cf3 connor0728\cf0  
\fs20 7:35:41 pm
\fs26 \
should I still answer it for this week?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:35:57 pm
\fs26 \
\pard\pardeftab720

\b \cf0 If you got a 7 on it, I don't think you'll need to answer it again.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:36:30 pm
\fs26 \
\pard\pardeftab720

\b \cf0 But I've never done this particular maneuver before, so if something looks fishy this week, just send me a private message and we'll get it sorted out.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:36:47 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Okay, so now to the task at hand:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:37:44 pm
\fs26 \
\pard\pardeftab720

\b \cf0 You may have noticed a post I made to the message board a couple days ago that actually the lesson plans I was working from last week were impossible to get through because they consisted of the content for Weeks 13 AND 14!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:37:48 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So good news!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:38:43 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We're going to pick up this week from where we left off last week and finish writing the AList class together.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:38:58 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Then we'll discuss how we can use the AList class in an example.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:39:39 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Then we'll look at how we can make the whole thing generic (so we can use it to store any kind of data rather than only Strings).
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:39:54 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Any questions or comments before we dig in?
\b0 \
\pard\pardeftab720
\cf3 AkshajK\cf0  
\fs20 7:40:30 pm
\fs26 \
are we going to learn about the difference between List and ArrayList\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:40:47 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We will not be talking today about the interface in Java's library called List.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:41:27 pm
\fs26 \
\pard\pardeftab720

\b \cf0 But if there's time at the end of class, we will introduce the data structure we'll be looking at next week, linked lists!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:41:54 pm
\fs26 \
\pard\pardeftab720

\b \cf0 More to the point, this last half of the class will be using Java, but it won't be as much ABOUT Java.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:42:41 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Rather, we're going to be focusing on data structure more generally, which can be implemented in any sufficiently powerful programming language.
\b0 \
\pard\pardeftab720
\cf3 EmeraldBot\cf0  
\fs20 7:42:51 pm
\fs26 \
Are linked lists fun?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:42:57 pm
\fs26 \
\pard\pardeftab720

\b \cf0 They're so fun. You'll see!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:43:11 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Ok. Enough dilly-dallying.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:43:14 pm
\fs26 \
\pard\pardeftab720

\b \cf4 Java Programming with Data Structures Week 14: Introduction to Lists (Part 2)
\b0 \cf0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:43:29 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Last week, we started coding a dynamic array structure to implement the abstract data type of a list. Here's the list of methods we were (and are) going to add:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:43:38 pm
\fs26 \
\pard\pardeftab720

\b \cf0 default constructor\
addToFront(x) \'96 puts x on the front of the list\
addToBack(x) \'96 puts x on the back\
insert(x, position) \'96 put x into the given position\
replace(x, position) \'96 replace given position with x\
get(position) \'96 returns element at position, or error condition if position not valid\
size() \'96 how many elements are in the list\
isEmpty() \'96 are there elements in the list\
contains(x) \'96 is x in the list?\
remove(position) \'96 delete the element at given position\
index(x) \'96 returns first position of x in the list, -1 if not there\
toString() \'96 gives a printable version of the list
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:43:43 pm
\fs26 \
\pard\pardeftab720

\b \cf0 That led to the following interface (assuming our lists contained Strings):
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:43:47 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
public interface AOPSList \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  addToFront\cf5 (\cf7 String\cf0  x\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // puts x on the front of the list
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  addToBack\cf5 (\cf7 String\cf0  x\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // puts x on the back
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  insert\cf5 (\cf7 String\cf0  x, \cf6 int\cf0  position\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // put x into the given position
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  replace\cf5 (\cf7 String\cf0  x, \cf6 int\cf0  position\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // replace given position with x
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf7 String\cf0  get\cf5 (\cf6 int\cf0  position\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // return element in given position
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 int\cf0  size\cf5 ()\cf8 ;\cf0  
\f2\i \cf9 // how many elements are in the list
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 boolean\cf0  isEmpty\cf5 ()\cf8 ;\cf0  
\f2\i \cf9 // are there elements in the list
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 boolean\cf0  contains\cf5 (\cf7 String\cf0  x\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // is x in the list?
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  remove\cf5 (\cf6 int\cf0  position\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // delete the element at given position
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 int\cf0  index\cf5 (\cf7 String\cf0  x\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // returns first position of x in the list, -1 if not there
\f1\i0 \cf0 \
\pard\pardeftab720
\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 7:44:32 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We got through the constructor and the first three methods, noting that addToFront and addToBack are special cases of insert. Here's the code so far:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:44:47 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (This next one's going to be big. Brace yourselves.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:44:49 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
public class AList implements AOPSList \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0private \cf7 String\cf0  \cf5 []\cf0  array\cf8 ;\cf0  
\f2\i \cf9 // to store the elements
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0private \cf6 int\cf0  capacity\cf8 ;\cf0  
\f2\i \cf9 // number of spots for elements in the array
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0private \cf6 int\cf0  size\cf8 ;\cf0  
\f2\i \cf9 // number of elements actually stored
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0
\f2\i \cf2 /**\
\'a0\'a0\'a0\'a0 * Constructor\
\'a0\'a0\'a0\'a0 * Sets an empty list of capacity 10\
\'a0\'a0\'a0\'a0 */
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public AList\cf5 ()\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 capacity\cf0  \cf8 =\cf0  \cf11 10\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 array\cf0  \cf8 =\cf0  new \cf7 String\cf5 [\cf0 this.\cf10 capacity\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 size\cf0  \cf8 =\cf0  \cf11 0\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\'a0\'a0\'a0\'a0@Override\
\'a0\'a0\'a0\'a0
\f2\i \cf2 /**\
\'a0\'a0\'a0\'a0 * Puts an element at the beginning of the list\
\'a0\'a0\'a0\'a0 * x element to insert\
\'a0\'a0\'a0\'a0 */
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  addToFront\cf5 (\cf7 String\cf0  x\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 insert\cf5 (\cf0 x, \cf11 0\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // add element to position 0
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\'a0\'a0\'a0\'a0@Override\
\'a0\'a0\'a0\'a0
\f2\i \cf2 /**\
\'a0\'a0\'a0\'a0 * Puts an element at the end of the list\
\'a0\'a0\'a0\'a0 * x element to insert\
\'a0\'a0\'a0\'a0 */
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  addToBack\cf5 (\cf7 String\cf0  x\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 insert\cf5 (\cf0 x,  this.\cf10 size\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // add element at open last position
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\'a0\'a0\'a0\'a0
\f2\i \cf2 /**\
\'a0\'a0\'a0\'a0 * Doubles capacity of the list\
\'a0\'a0\'a0\'a0 */
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0private \cf6 void\cf0  resize\cf5 ()\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 String\cf0  \cf5 []\cf0  newArray \cf8 =\cf0  new \cf7 String\cf5 [\cf11 2\cf8 *\cf0 this.\cf10 capacity\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for \cf5 (\cf6 int\cf0  i \cf8 =\cf0  \cf11 0\cf8 ;\cf0  i \cf8 <\cf0  this.\cf10 size\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0newArray\cf5 [\cf0  i \cf5 ]\cf0  \cf8 =\cf0  this.\cf10 array\cf5 [\cf0  i \cf5 ]\cf8 ;\cf0  
\f2\i \cf9 // copy elements to new list
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 array\cf0  \cf8 =\cf0  newArray\cf8 ;\cf0  
\f2\i \cf9 // make array the new list
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 capacity\cf0  \cf8 *=\cf0  \cf11 2\cf8 ;\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\'a0\'a0\'a0\'a0@Override\
\'a0\'a0\'a0\'a0
\f2\i \cf2 /**\
\'a0\'a0\'a0\'a0 * Add an element somewhere in the list\
\'a0\'a0\'a0\'a0 * x element to insert\
\'a0\'a0\'a0\'a0 * position place where element will end up\
\'a0\'a0\'a0\'a0 */
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  insert\cf5 (\cf7 String\cf0  x, \cf6 int\cf0  position\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 position \cf8 <\cf0  \cf11 0\cf0  \cf8 ||\cf0  position \cf8 >\cf0  this.\cf10 size\cf5 )\cf0  
\f2\i \cf9 // verify position is valid
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 this.\cf10 capacity\cf0  \cf8 ==\cf0  this.\cf10 size\cf5 )\cf0  
\f2\i \cf9 // resize if array is currently full
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 resize\cf5 ()\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for \cf5 (\cf6 int\cf0  i\cf8 =\cf0 this.\cf10 size\cf8 -\cf11 1\cf8 ;\cf0  i \cf8 >=\cf0  position\cf8 ;\cf0  i\cf8 --\cf5 )\cf0  
\f2\i \cf9 // shift elements after position down 1 spot
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 array\cf5 [\cf0 i\cf8 +\cf11 1\cf5 ]\cf0  \cf8 =\cf0  this.\cf10 array\cf5 [\cf0  i \cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 array\cf5 [\cf0 position\cf5 ]\cf0  \cf8 =\cf0  x\cf8 ;\cf0  
\f2\i \cf9 // place element in position
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 size\cf8 ++;\cf0  
\f2\i \cf9 // adjust size
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 7:44:59 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (Note: It's better style to put in some extra carriage returns between the different methods. I only removed the double spacing in the portion of code I just posted so that I could put it all into a single message to the classroom. Let me know if you think it looks too crowded to read -- keeping in mind though that since we wrote all that code together last week, so everything up there should be review for you -- and I'll put it back the way it was for the next time this class gets taught.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:45:19 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Note the private method resize. What's its running time?
\b0 \
\pard\pardeftab720
\cf3 ReciterOfPi\cf0  
\fs20 7:46:07 pm
\fs26 \
O(this.size)\
\cf3 JRY\cf0  
\fs20 7:46:07 pm
\fs26 \
O(N)\
\cf3 connor0728\cf0  
\fs20 7:46:07 pm
\fs26 \
O(N)\
\cf3 chenjamin\cf0  
\fs20 7:46:07 pm
\fs26 \
O(N)\
\cf3 ScottBusche\cf0  
\fs20 7:46:12 pm
\fs26 \
O(elements in list)\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:46:15 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It's linear in the size of the array. That makes the worst-case running time linear for the other methods. If you're not resizing, though, which of addToFront, addToBack, and insert (well, assuming you're not inserting to front or back) is fastest?
\b0 \
\pard\pardeftab720
\cf3 JRY\cf0  
\fs20 7:47:09 pm
\fs26 \
addToBack\
\cf3 MathWolf\cf0  
\fs20 7:47:09 pm
\fs26 \
addToBack\
\cf3 connor0728\cf0  
\fs20 7:47:09 pm
\fs26 \
addToBack\
\cf3 Tungsten\cf0  
\fs20 7:47:09 pm
\fs26 \
addToBack\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:47:23 pm
\fs26 \
\pard\pardeftab720

\b \cf0 addToBack is fastest. It's constant time, since we just put the element in the last slot. There's no shifting needed. insert would need at least one shift, while addToFront shifts all the elements.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:48:31 pm
\fs26 \
\pard\pardeftab720

\b \cf0 That's it for the review. To recap, today we'll finish the AList class, look at an application that uses it, and discuss making it generic (so it can hold other things besides Strings). If there's time, we'll finish up by introducing the data structure we'll be looking at in detail next week, the 
\i linked list
\i0 . Let's get started!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:48:41 pm
\fs26 \
\pard\pardeftab720

\b \cf4 PART 1: DYNAMIC ARRAYS: CONTINUED
\b0 \cf0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:48:51 pm
\fs26 \
\pard\pardeftab720

\b \cf0 insert is probably the trickiest method to write. Once you have that, the rest are easy. Can you code replace? Check to make sure position is valid, and if so, put the element there. Think carefully about what the highest valid position is.
\b0 \
\pard\pardeftab720
\cf3 k77frank\cf0  
\fs20 7:50:20 pm
\fs26 \
public void replace(String x, int position) \{\
if (position >= 0 && position <= this.size - 1)\
this.array[position] = x;\
\}\
\cf3 JRY\cf0  
\fs20 7:50:20 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 void
\f3\b0 \cf0  replace\cf5 (\cf7 String\cf0  x, 
\f1\b \cf6 int
\f3\b0 \cf0  position\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf11 0\cf0  \cf8 <=\cf0  position \cf8 &&\cf0  position \cf8 <=\cf0  
\f1\b this
\f3\b0 .\cf10 size\cf8 -\cf11 1\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b this
\f3\b0 .\cf10 array\cf5 [\cf0 position\cf5 ]\cf0  \cf8 =\cf0  x\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 chenjamin\cf0  
\fs20 7:50:20 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 void
\f3\b0 \cf0  replace\cf5 (\cf7 String\cf0  x, 
\f1\b \cf6 int
\f3\b0 \cf0  position\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf0 position \cf8 <\cf0  \cf11 0\cf0  \cf8 ||\cf0  position \cf8 >\cf0  
\f1\b this
\f3\b0 .\cf10 size\cf0  \cf8 -\cf0  \cf11 1\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0 \cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b this
\f3\b0 .\cf10 array\cf5 [\cf0 position\cf5 ]\cf0  \cf8 =\cf0  x\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 MathWolf\cf0  
\fs20 7:50:20 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 void
\f3\b0 \cf0  replace\cf5 (\cf7 String\cf0  x, 
\f1\b \cf6 int
\f3\b0 \cf0  position\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f4\i \cf9 // TODO Auto-generated method stub
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf0 position\cf8 <\cf0 size \cf8 &&\cf0  position\cf8 >=\cf11 0\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0array\cf5 [\cf0 position\cf5 ]\cf0  \cf8 =\cf0  x\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:50:24 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's the answer:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:50:26 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf6 void\cf0  replace\cf5 (\cf7 String\cf0  x, \cf6 int\cf0  position\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 position \cf8 >=\cf0  \cf11 0\cf0  \cf8 &&\cf0  position \cf8 <=\cf0  this.\cf10 size\cf0  \cf8 -\cf0  \cf11 1\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 array\cf5 [\cf0 position\cf5 ]\cf0  \cf8 =\cf0  x\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 7:51:37 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Note that we could NOT have used the condition \cf4 position <= this.size\cf0  because that doesn't correspond to an existing position in the array.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:51:47 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Running time?
\b0 \
\pard\pardeftab720
\cf3 Tungsten\cf0  
\fs20 7:52:37 pm
\fs26 \
O(1)\
\cf3 JRY\cf0  
\fs20 7:52:37 pm
\fs26 \
O(1)\
\cf3 MathWolf\cf0  
\fs20 7:52:37 pm
\fs26 \
O(1)\
\cf3 ScottBusche\cf0  
\fs20 7:52:37 pm
\fs26 \
O(1)\
\cf3 k77frank\cf0  
\fs20 7:52:37 pm
\fs26 \
O(1)\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:52:45 pm
\fs26 \
\pard\pardeftab720

\b \cf0 This one's O(1). We jump straight to the position without needing a loop.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:52:58 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Any questions about that?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:54:23 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The fact that we can jump straight to any position in the array in O(1) time (constant time as the size of the array varies) is one of the main features of arrays as a data structure.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:56:16 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What makes jumping to a position O(1) is the fact that an array gets stored in memory as a consecutive chunk of memory blocks, so if your program knows the address of the first position (it just makes a note of that when it creates the array for you) and it knows the index of the thing you're asking for (which it knows because you asked for it) then simple arithmetic tells it what memory address to jump to to get what you wanted.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:56:34 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Ok, let's do \cf4 get\cf0  now. Recall that it returns "ERROR" if the position is out of bounds.
\b0 \
\pard\pardeftab720
\cf3 JRY\cf0  
\fs20 7:57:51 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  \cf7 String\cf0  get\cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  position\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf11 0\cf0  \cf8 <=\cf0  position \cf8 &&\cf0  position \cf8 <=\cf0  
\f1\b this
\f3\b0 .\cf10 size\cf8 -\cf11 1\cf5 )\cf0  
\f4\i \cf9 //valid index
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  
\f1\b this
\f3\b0 .\cf10 array\cf5 [\cf0 position\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0
\f1\b else
\f3\b0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  \cf12 "ERROR"\cf8 ;\cf0 \
\pard\pardeftab720
\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 ScottBusche\cf0  
\fs20 7:57:51 pm
\fs26 \
\pard\pardeftab720

\f3 \cf0 \'a0\'a0\'a0\'a0
\f1\b public
\f3\b0  \cf7 String\cf0  get\cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  position\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf0 position\cf8 >
\f1\b \cf0 this
\f3\b0 .\cf10 size\cf0  \cf8 ||\cf0  position\cf8 <\cf11 0\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  \cf12 "ERROR"\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  
\f1\b this
\f3\b0 .\cf10 array\cf5 [\cf0 position\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 MathWolf\cf0  
\fs20 7:57:51 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  \cf7 String\cf0  get\cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  position\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f4\i \cf9 // TODO Auto-generated method stub
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf0 position\cf8 <\cf0 size \cf8 &&\cf0  position\cf8 >=\cf11 0\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  array\cf5 [\cf0 position\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  \cf12 "ERROR"\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:57:57 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's what I have:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:58:00 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf7 String\cf0  get\cf5 (\cf6 int\cf0  position\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 position \cf8 >=\cf0  \cf11 0\cf0  \cf8 &&\cf0  position \cf8 <=\cf0  this.\cf10 size\cf0  \cf8 -\cf0  \cf11 1\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return this.\cf10 array\cf5 [\cf0 position\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return \cf12 "ERROR"\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 7:58:04 pm
\fs26 \
\pard\pardeftab720

\b \cf0 This one's O(1) as well.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:58:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 How about \cf4 size\cf0 ? Can you code it and tell me its running time?
\b0 \
\pard\pardeftab720
\cf3 connor0728\cf0  
\fs20 7:58:50 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 int
\f3\b0 \cf0  size\cf5 ()\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  
\f1\b this
\f3\b0 .\cf10 size\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 Tungsten\cf0  
\fs20 7:58:50 pm
\fs26 \
\pard\pardeftab720

\f3 \cf0 \'a0\'a0\'a0\'a0@Override\
\'a0\'a0\'a0\'a0
\f1\b public
\f3\b0  
\f1\b \cf6 int
\f3\b0 \cf0  size\cf5 ()\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  
\f1\b this
\f3\b0 .\cf10 size\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 Tungsten\cf0  
\fs20 7:58:50 pm
\fs26 \
It is O(1)\
\cf3 puwei99\cf0  
\fs20 7:58:50 pm
\fs26 \
public int size() \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return this.size;\
\'a0\'a0\'a0\'a0\} running time is O(1)\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:58:58 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Yeah. This one's a breeze!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:59:06 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We're just returning the instance variable, so it's O(1):
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:59:07 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf6 int\cf0  size\cf5 ()\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return this.\cf10 size\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 7:59:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Let's keep it going. Do isEmpty -- remember it returns true if there are no elements in the list:
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 8:00:57 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 boolean
\f3\b0 \cf0  isEmpty\cf5 ()\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  \cf5 (\cf0 size \cf8 ==\cf0  \cf11 0\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 ScottBusche\cf0  
\fs20 8:00:57 pm
\fs26 \
\pard\pardeftab720

\f3 \cf0 \'a0\'a0\'a0\'a0
\f1\b public
\f3\b0  
\f1\b \cf6 boolean
\f3\b0 \cf0  isEmpty\cf5 ()\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  
\f1\b this
\f3\b0 .\cf10 size\cf8 ==\cf11 0\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 JRY\cf0  
\fs20 8:00:57 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 boolean
\f3\b0 \cf0  isEmpty\cf5 ()\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  \cf5 (
\f1\b \cf0 this
\f3\b0 .\cf10 size\cf0  \cf8 ==\cf0  \cf11 0\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 AkshajK\cf0  
\fs20 8:00:57 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 boolean
\f3\b0 \cf0  isEmpty\cf5 ()\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  \cf5 (
\f1\b \cf0 this
\f3\b0 .\cf10 size\cf0  \cf8 ==\cf0  \cf11 0\cf5 )\cf8 ;\cf0 \
\pard\pardeftab720
\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 EmeraldBot\cf0  
\fs20 8:00:57 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 if
\f3\b0  \cf5 (\cf0 size \cf8 <=\cf0  \cf11 0\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  
\f1\b \cf6 true
\f3\b0 \cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b else
\f3\b0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  
\f1\b \cf6 false
\f3\b0 \cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf3 Tungsten\cf0  
\fs20 8:00:57 pm
\fs26 \
\pard\pardeftab720

\f3 \cf0 \'a0\'a0\'a0\'a0@Override\
\'a0\'a0\'a0\'a0
\f1\b public
\f3\b0  
\f1\b \cf6 boolean
\f3\b0 \cf0  isEmpty\cf5 ()\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  
\f1\b this
\f3\b0 .\cf10 size\cf0  \cf8 ==\cf0  \cf11 0\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 williamyin08\cf0  
\fs20 8:00:57 pm
\fs26 \
public boolean isEmpty() \{ if(this.size = 0) return true; else return false; \}\
\cf3 chenjamin\cf0  
\fs20 8:00:57 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 boolean
\f3\b0 \cf0  isEmpty\cf5 ()\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  
\f1\b this
\f3\b0 .\cf10 size\cf0  \cf8 ==\cf0  \cf11 0\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:01:08 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's mine:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:01:10 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf6 boolean\cf0  isEmpty\cf5 ()\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return this.\cf10 size\cf0  \cf8 ==\cf0  \cf11 0\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:01:24 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Another one that's constant time. The next one isn't. To do \cf4 contains\cf0 , you have to look through all the elements potentially. But we can still code it in one line if we use another AList method. Which one?
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 8:02:27 pm
\fs26 \
index\
\cf3 EmeraldBot\cf0  
\fs20 8:02:27 pm
\fs26 \
index\
\cf3 Tungsten\cf0  
\fs20 8:02:27 pm
\fs26 \
indexOf?\
\cf3 connor0728\cf0  
\fs20 8:02:27 pm
\fs26 \
index\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:02:33 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We can use \cf4 index\cf0  to determine if x is present. A -1 means it isn't; anything else means it is.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:02:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So the code is just:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:02:42 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf6 boolean\cf0  contains\cf5 (\cf7 String\cf0  x\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return this.\cf10 index\cf5 (\cf0 x\cf5 )\cf0  \cf8 !=\cf0  \cf8 -\cf11 1\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:03:30 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Since we just made use of the \cf4 index\cf0  method but haven't written it yet, let's jump to writing that. We loop through array stopping when we find the element or when we've checked everything. In the first case, we return the position where we stopped. In the second, we return -1.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:03:38 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Can you code the method from there?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:06:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Remember that the elements of our array are Strings (for now). Is there anything special we need to do to check for equality of reference types? (Recall that a reference type is anything that isn't one of the 8 primitive types: byte, short, int, long, float, double, char, boolean.)
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 8:06:24 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 int
\f3\b0 \cf0  index\cf5 (\cf7 String\cf0  s\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b for
\f3\b0  \cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  i\cf8 =\cf11 0\cf8 ;\cf0  i\cf8 <\cf0 size\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf0 array\cf5 [\cf0 i\cf5 ]\cf0 .\cf10 equals\cf5 (\cf0 s\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  i\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  \cf8 -\cf11 1\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 JRY\cf0  
\fs20 8:06:24 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 int
\f3\b0 \cf0  index\cf5 (\cf7 String\cf0  x\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b for
\f3\b0  \cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  i \cf8 =\cf0  \cf11 0\cf8 ;\cf0  i \cf8 <\cf0  
\f1\b this
\f3\b0 .\cf10 size\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (
\f1\b \cf0 this
\f3\b0 .\cf10 array\cf5 [\cf0 i\cf5 ]\cf0 .\cf10 equals\cf5 (\cf0 x\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  i\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  \cf8 -\cf11 1\cf8 ;\cf0  
\f4\i \cf9 //x is not in this.array
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 PiCrazy31415\cf0  
\fs20 8:06:24 pm
\fs26 \
public int index(String x)\{\
for(int position = 0; position < this.size; position++)\{\
if(this.array[position].equals(x))\{\
return position;\
\}\
\}\
return -1;\
\}\
\cf3 Tungsten\cf0  
\fs20 8:06:24 pm
\fs26 \
\pard\pardeftab720

\f3 \cf0 \'a0\'a0\'a0\'a0@Override\
\'a0\'a0\'a0\'a0
\f1\b public
\f3\b0  
\f1\b \cf6 int
\f3\b0 \cf0  index\cf5 (\cf7 String\cf0  x\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b for
\f3\b0  \cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  i \cf8 =\cf0  \cf11 0\cf8 ;\cf0  i \cf8 <\cf0  
\f1\b this
\f3\b0 .\cf10 size\cf8 ;\cf0  i \cf8 ++\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (
\f1\b \cf0 this
\f3\b0 .\cf10 array\cf5 [\cf0 i\cf5 ]\cf0 .\cf10 equals\cf5 (\cf0 x\cf5 ))\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  i\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  \cf8 -\cf11 1\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 MathWolf\cf0  
\fs20 8:06:24 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 int
\f3\b0 \cf0  index\cf5 (\cf7 String\cf0  x\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f4\i \cf9 // TODO Auto-generated method stub
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b for
\f3\b0  \cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  i\cf8 =\cf11 0\cf8 ;\cf0  i\cf8 <\cf0 size\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (
\f1\b \cf0 this
\f3\b0 .\cf10 array\cf5 [\cf0 i\cf5 ]\cf0 .\cf10 equals\cf5 (\cf0 x\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  i\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  \cf8 -\cf11 1\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 connor0728\cf0  
\fs20 8:06:24 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 int
\f3\b0 \cf0  index\cf5 (\cf7 String\cf0  x\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b for
\f3\b0  \cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  pos \cf8 =\cf0  \cf11 0\cf8 ;\cf0  pos \cf8 <\cf0  
\f1\b this
\f3\b0 .\cf10 size\cf8 ;\cf0  pos\cf8 ++\cf5 )\cf0  \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf0 x.\cf10 equals\cf5 (
\f1\b \cf0 this
\f3\b0 .\cf10 array\cf5 [\cf0 pos\cf5 ]))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  pos\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  \cf8 -\cf11 1\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 chenjamin\cf0  
\fs20 8:06:24 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b \cf6 int
\f3\b0 \cf0  index\cf5 (\cf7 String\cf0  x\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b for
\f3\b0  \cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  i \cf8 =\cf0  \cf11 0\cf8 ;\cf0  i \cf8 <\cf0  
\f1\b this
\f3\b0 .\cf10 size\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0 \cf5 (
\f1\b \cf0 this
\f3\b0 .\cf10 array\cf5 [\cf0 i\cf5 ]\cf0 .\cf10 equals\cf5 (\cf0 x\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  i\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b return
\f3\b0  \cf8 -\cf11 1\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:07:45 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Right, we need to use the equals method to check for equality of Strings. == will only work correctly for primitive types. (For reference types, == checks whether the two things you're comparing are identically the same object in memory, whereas in situations like this, you want to be checking whether they contain the same information.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:07:56 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's my answer:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:07:57 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf6 int\cf0  index\cf5 (\cf7 String\cf0  x\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for \cf5 (\cf6 int\cf0  pos \cf8 =\cf0  \cf11 0\cf8 ;\cf0  pos \cf8 <\cf0  this.\cf10 size\cf8 ;\cf0  pos\cf8 ++\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 x.\cf10 equals\cf5 (\cf0 this.\cf10 array\cf5 [\cf0 pos\cf5 ]))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return pos\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return \cf8 -\cf11 1\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:08:06 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What's the worst-case running time?
\b0 \
\pard\pardeftab720
\cf3 MathWolf\cf0  
\fs20 8:08:35 pm
\fs26 \
O(N)\
\cf3 chenjamin\cf0  
\fs20 8:08:35 pm
\fs26 \
O(N)\
\cf3 ScottBusche\cf0  
\fs20 8:08:35 pm
\fs26 \
O(N)\
\cf3 Tungsten\cf0  
\fs20 8:08:35 pm
\fs26 \
O(N)\
\cf3 puwei99\cf0  
\fs20 8:08:35 pm
\fs26 \
O(n)\
\cf3 JRY\cf0  
\fs20 8:08:35 pm
\fs26 \
O(N)\
\cf3 chutney\cf0  
\fs20 8:08:35 pm
\fs26 \
O(N)\
\cf3 EmeraldBot\cf0  
\fs20 8:08:35 pm
\fs26 \
O(N)\
\cf3 ReciterOfPi\cf0  
\fs20 8:08:35 pm
\fs26 \
O(this.size)\
\cf3 MSTang\cf0  
\fs20 8:08:35 pm
\fs26 \
O(N)\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:08:39 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It's linear or O(N). When does the worst case occur? There are two possibilities.
\b0 \
\pard\pardeftab720
\cf3 chenjamin\cf0  
\fs20 8:09:32 pm
\fs26 \
the element is at the last position or it is not in the array\
\cf3 MathWolf\cf0  
\fs20 8:09:32 pm
\fs26 \
When the item is not in the list or at the end.\
\cf3 MSTang\cf0  
\fs20 8:09:32 pm
\fs26 \
Either it equals last element or it's not there\
\cf3 Tungsten\cf0  
\fs20 8:09:32 pm
\fs26 \
When x is at the end of the array or not in the array.\
\cf3 JRY\cf0  
\fs20 8:09:32 pm
\fs26 \
If x is the last element in the list or if it isn't in the list\
\cf3 williamyin08\cf0  
\fs20 8:09:32 pm
\fs26 \
Returning -1 or having the last element be the found one\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:09:46 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The two worst cases happen when x is not in the list or x is the last element. In either case, we look at everything.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:09:47 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What's the best case?
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 8:10:12 pm
\fs26 \
First element\
\cf3 JRY\cf0  
\fs20 8:10:12 pm
\fs26 \
x is the first element\
\cf3 MathWolf\cf0  
\fs20 8:10:12 pm
\fs26 \
item is the first in array\
\cf3 k77frank\cf0  
\fs20 8:10:12 pm
\fs26 \
x is first\
\cf3 chenjamin\cf0  
\fs20 8:10:12 pm
\fs26 \
it's the first element in the list; O(1)\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:10:15 pm
\fs26 \
\pard\pardeftab720

\b \cf0 x is the first element, and we're done right away. That's O(1).
\b0 \
\pard\pardeftab720
\cf3 AkshajK\cf0  
\fs20 8:10:18 pm
\fs26 \
O(1)\
\cf3 MathWolf\cf0  
\fs20 8:10:18 pm
\fs26 \
O(1)\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:10:22 pm
\fs26 \
\pard\pardeftab720

\b \cf0 To compute the average case, we could assume a search for any element is equally likely. We'd expect to go through about half the elements before finding it. That's still O(N) though.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:11:04 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Two more to do. (Almost done with AList! Then we can test it on a real world example!) One is the \cf4 remove\cf0  method we skipped over. This is the reverse of \cf4 insert\cf0 . Instead of shifting elements forward, we shift elements back.
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 8:11:10 pm
\fs26 \
Are we going to do sort() ever?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:11:54 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Since our goal in this last half of the course is to talk about data structures rather than algorithms per se, I think we won't end up talking about sorting.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:12:31 pm
\fs26 \
\pard\pardeftab720

\b \cf0 I'm not sure. I haven't fully familiarized myself with the contents of the last few lessons yet. Based on what I have examined, I think sorting will be left to another course later on.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:12:55 pm
\fs26 \
\pard\pardeftab720

\b \cf0 You're right though that that would be a natural thing to add into this class.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:13:11 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Back to talking about the \cf4 remove\cf0  method.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:13:53 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Will we need to call \cf4 resize\cf0  in our remove method?
\b0 \
\pard\pardeftab720
\cf3 puwei99\cf0  
\fs20 8:14:55 pm
\fs26 \
no\
\cf3 k77frank\cf0  
\fs20 8:14:55 pm
\fs26 \
no\
\cf3 MSTang\cf0  
\fs20 8:14:55 pm
\fs26 \
no, never - the size is DEcreasing\
\cf3 chenjamin\cf0  
\fs20 8:14:55 pm
\fs26 \
no\
\cf3 chutney\cf0  
\fs20 8:14:55 pm
\fs26 \
No\
\cf3 connor0728\cf0  
\fs20 8:14:55 pm
\fs26 \
no\
\cf3 spower4\cf0  
\fs20 8:14:55 pm
\fs26 \
no\
\cf3 Tungsten\cf0  
\fs20 8:14:55 pm
\fs26 \
No.\
\cf3 JRY\cf0  
\fs20 8:14:55 pm
\fs26 \
No, because we're removing already-existing elements\
\cf3 MathWolf\cf0  
\fs20 8:14:55 pm
\fs26 \
No\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:14:58 pm
\fs26 \
\pard\pardeftab720

\b \cf0 No, we've got fewer elements when we're done, so the array certainly has enough to hold them all.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:16:36 pm
\fs26 \
\pard\pardeftab720

\b \cf0 More precisely, if it were really an issue to economize on space at every opportunity, then maybe we'd want to do some kind of resizing. But under typical circumstances on modern hardware, we've got bigger fish to fry!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:16:47 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What\'92s the first index that should move backwards?
\b0 \
\pard\pardeftab720
\cf3 JRY\cf0  
\fs20 8:17:27 pm
\fs26 \
position + 1\
\cf3 k77frank\cf0  
\fs20 8:17:27 pm
\fs26 \
position+1\
\cf3 chenjamin\cf0  
\fs20 8:17:27 pm
\fs26 \
position + 1\
\cf3 ReciterOfPi\cf0  
\fs20 8:17:38 pm
\fs26 \
the element after the one we're removing!\
\cf3 ScottBusche\cf0  
\fs20 8:17:38 pm
\fs26 \
The one after the removed one.\
\cf3 MSTang\cf0  
\fs20 8:17:46 pm
\fs26 \
n+1\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:17:49 pm
\fs26 \
\pard\pardeftab720

\b \cf0 array[position+1] can erase what's in array[position], since we don't care about the latter. Then we move forward from there.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:17:51 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What's the last index that must move backwards?
\b0 \
\pard\pardeftab720
\cf3 JRY\cf0  
\fs20 8:18:36 pm
\fs26 \
this.size - 1\
\cf3 MSTang\cf0  
\fs20 8:18:36 pm
\fs26 \
size - 1\
\cf3 k77frank\cf0  
\fs20 8:18:36 pm
\fs26 \
size-1\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:18:59 pm
\fs26 \
\pard\pardeftab720

\b \cf0 array[this.size-1]. Note that we don't need to shift anything 
\i into
\i0  this spot. By adjusting the size down, we forget it ever existed, which effectively erases it.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:19:03 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So here's the code:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:19:05 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf6 void\cf0  remove\cf5 (\cf6 int\cf0  position\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 position\cf8 <\cf11 0\cf0  \cf8 ||\cf0  position\cf8 >=\cf0 this.\cf10 size\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for \cf5 (\cf6 int\cf0  i\cf8 =\cf0 position\cf8 +\cf11 1\cf8 ;\cf0  i \cf8 <\cf0  this.\cf10 size\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 array\cf5 [\cf0 i\cf8 -\cf11 1\cf5 ]\cf0  \cf8 =\cf0  this.\cf10 array\cf5 [\cf0 i\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 size\cf8 --;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:19:18 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We still should check for a valid position to start. Note that we can't remove an element at position this.size.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:19:32 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Questions at this point?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:20:05 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We've covered everything in the interface. So the last method is toString, so we can display the list. We'll make the String of the same form as my examples [A, B, C, D, E].
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:20:14 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The first character in the String is a bracket, so we'll start with that:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:20:16 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf7 String\cf0  toString\cf5 ()\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 String\cf0  answer \cf8 =\cf0  \cf12 "["\cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:20:44 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Notice that in my example ([A, B, C, D, E]), the E is different from the others. What about it is different?
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 8:21:10 pm
\fs26 \
No comma\
\cf3 ReciterOfPi\cf0  
\fs20 8:21:10 pm
\fs26 \
it has no comma at the end\
\cf3 Tungsten\cf0  
\fs20 8:21:10 pm
\fs26 \
There is no comma after E\
\cf3 manbugbeebee\cf0  
\fs20 8:21:10 pm
\fs26 \
There's no comma after it\
\cf3 connor0728\cf0  
\fs20 8:21:10 pm
\fs26 \
doesn't have a comma after it\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:21:14 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It's the only one not followed by a comma and space. It has the closed bracket instead.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:21:21 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So this means we should put everything but the last element in first, following each with a comma. Can you do that part?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:23:29 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Go ahead and include all the code for toString up to the point I asked about.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:24:49 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Three so far. Anyone want me to wait another 10 seconds or so?
\b0 \
\pard\pardeftab720
\cf3 connor0728\cf0  
\fs20 8:25:06 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  \cf7 String\cf0  toString\cf5 ()\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 String\cf0  answer \cf8 =\cf0  \cf12 "["\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b for
\f3\b0  \cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  i\cf8 =\cf11 0\cf8 ;\cf0  i \cf8 <\cf0  
\f1\b this
\f3\b0 .\cf10 size\cf8 -\cf11 1\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0answer \cf8 +=\cf0  
\f1\b this
\f3\b0 .\cf10 array\cf5 [\cf0 i\cf5 ]\cf8 +\cf12 ", "\cf8 ;\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 Tungsten\cf0  
\fs20 8:25:06 pm
\fs26 \
\pard\pardeftab720

\f3 \cf0 \'a0\'a0\'a0\'a0@Override\
\'a0\'a0\'a0\'a0
\f1\b public
\f3\b0  \cf7 String\cf0  toString\cf5 ()\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 String\cf0  answer \cf8 =\cf0  \cf12 "["\cf8 ;\cf0 \
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b for
\f3\b0  \cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  i \cf8 =\cf0  \cf11 0\cf8 ;\cf0  i \cf8 <\cf0  
\f1\b this
\f3\b0 .\cf10 size\cf0  \cf8 -\cf0  \cf11 1\cf8 ;\cf0  i \cf8 ++\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0answer \cf8 +=\cf0  
\f1\b this
\f3\b0 .\cf10 array\cf5 [\cf0 i\cf5 ]\cf0  \cf8 +\cf0  \cf12 ", "\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 JRY\cf0  
\fs20 8:25:06 pm
\fs26 \
\pard\pardeftab720

\f3 \cf0 \'a0\'a0\'a0\'a0
\f1\b public
\f3\b0  \cf7 String\cf0  toString\cf5 ()\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 String\cf0  string \cf8 =\cf0  \cf12 "["\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b for
\f3\b0  \cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  i \cf8 =\cf0  \cf11 0\cf8 ;\cf0  i \cf8 <=\cf0  
\f1\b this
\f3\b0 .\cf10 size\cf8 -\cf11 2\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0string \cf8 +=\cf0  
\f1\b this
\f3\b0 .\cf10 array\cf5 [\cf0 i\cf5 ]\cf0  \cf8 +\cf0  \cf12 ", "\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 MSTang\cf0  
\fs20 8:25:25 pm
\fs26 \
\pard\pardeftab720

\f3 \cf7 String\cf0  s \cf8 =\cf0  \cf12 "["\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b for
\f3\b0  \cf5 (
\f1\b \cf6 int
\f3\b0 \cf0  i\cf8 =\cf11 0\cf8 ;\cf0  i\cf8 <\cf0 size\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0s \cf8 +=\cf0  array\cf5 [\cf0 i\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf0 i \cf8 !=\cf0  size\cf8 -\cf11 1\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0s \cf8 +=\cf0  \cf12 ", "\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:25:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's what I have:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:25:30 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf7 String\cf0  toString\cf5 ()\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 String\cf0  answer \cf8 =\cf0  \cf12 "["\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for \cf5 (\cf6 int\cf0  i\cf8 =\cf11 0\cf8 ;\cf0  i \cf8 <\cf0  this.\cf10 size\cf8 -\cf11 1\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0answer \cf8 +=\cf0  this.\cf10 array\cf5 [\cf0 i\cf5 ]\cf8 +\cf12 ", "\cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:25:36 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We could try to finish it with this code:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:25:37 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf7 String\cf0  toString\cf5 ()\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 String\cf0  answer \cf8 =\cf0  \cf12 "["\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for \cf5 (\cf6 int\cf0  i\cf8 =\cf11 0\cf8 ;\cf0  i \cf8 <\cf0  this.\cf10 size\cf8 -\cf11 1\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0answer \cf8 +=\cf0  this.\cf10 array\cf5 [\cf0 i\cf5 ]\cf8 +\cf12 ", "\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0answer \cf8 +=\cf0  this.\cf10 array\cf5 [\cf0 this.\cf10 size\cf8 -\cf11 1\cf5 ]\cf0  \cf8 +\cf0  \cf12 "]"\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return answer\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:25:38 pm
\fs26 \
\pard\pardeftab720

\b \cf0 But this has a potential error. What is it?
\b0 \
\pard\pardeftab720
\cf3 williamyin08\cf0  
\fs20 8:26:32 pm
\fs26 \
If it's an empty array?\
\cf3 Tungsten\cf0  
\fs20 8:26:32 pm
\fs26 \
What if there is nothing in the array?\
\cf3 MathWolf\cf0  
\fs20 8:26:32 pm
\fs26 \
If the size is 0\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:26:36 pm
\fs26 \
\pard\pardeftab720

\b \cf0 If our list is empty, this will crash. this.size is 0 in that case, and we can't access position -1.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:26:45 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Could our for loop crash on an empty list?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:28:01 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (Remember that for loops are just an idiom for a particular kind of while loop. Would a while loop crash if the condition it tests is not satisfied on the first pass through?)
\b0 \
\pard\pardeftab720
\cf3 JRY\cf0  
\fs20 8:28:17 pm
\fs26 \
no\
\cf3 Tungsten\cf0  
\fs20 8:28:17 pm
\fs26 \
No\
\cf3 chenjamin\cf0  
\fs20 8:28:17 pm
\fs26 \
no\
\cf3 MathWolf\cf0  
\fs20 8:28:17 pm
\fs26 \
no\
\cf3 MSTang\cf0  
\fs20 8:28:17 pm
\fs26 \
no - it never does anything\
\cf3 MathWolf\cf0  
\fs20 8:28:17 pm
\fs26 \
Nope\
\cf3 williamyin08\cf0  
\fs20 8:28:17 pm
\fs26 \
Nah. It'd just exit.\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:28:19 pm
\fs26 \
\pard\pardeftab720

\b \cf0 No. The loop doesn't even get to the body when the size is 0.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:28:54 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Our solution is then to handle the empty list as a special case. Here's the full code:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:28:55 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
   public \cf7 String\cf0  toString\cf5 ()\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 String\cf0  answer \cf8 =\cf0  \cf12 "["\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for \cf5 (\cf6 int\cf0  i\cf8 =\cf11 0\cf8 ;\cf0  i \cf8 <\cf0  this.\cf10 size\cf8 -\cf11 1\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0answer \cf8 +=\cf0  this.\cf10 array\cf5 [\cf0 i\cf5 ]\cf8 +\cf12 ", "\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 this.\cf10 size\cf8 >\cf11 0\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0answer \cf8 +=\cf0  this.\cf10 array\cf5 [\cf0 this.\cf10 size\cf8 -\cf11 1\cf5 ]\cf0  \cf8 +\cf0  \cf12 "]"\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0answer \cf8 +=\cf0  \cf12 "]"\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return answer\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:29:18 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What's the running time of toString?
\b0 \
\pard\pardeftab720
\cf3 JRY\cf0  
\fs20 8:31:31 pm
\fs26 \
O(N)\
\cf3 connor0728\cf0  
\fs20 8:31:31 pm
\fs26 \
O(N)\
\cf3 spower4\cf0  
\fs20 8:31:31 pm
\fs26 \
O(size)\
\cf3 k77frank\cf0  
\fs20 8:31:31 pm
\fs26 \
O(N)\
\cf3 MathWolf\cf0  
\fs20 8:31:31 pm
\fs26 \
O(N)\
\cf3 PiCrazy31415\cf0  
\fs20 8:31:31 pm
\fs26 \
O(N)\
\cf3 ReciterOfPi\cf0  
\fs20 8:31:31 pm
\fs26 \
O(this.size)\
\cf3 Tungsten\cf0  
\fs20 8:31:31 pm
\fs26 \
O(N)\
\cf3 chenjamin\cf0  
\fs20 8:31:31 pm
\fs26 \
O(N)\
\cf3 puwei99\cf0  
\fs20 8:31:31 pm
\fs26 \
O(n)\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:31:34 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It's O(N) as we need to look at each element to put it in the String.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:31:38 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's a summary of the worst-case running times of all of the methods:\
addToFront: O(N)\
addToBack: O(1) if no resize, O(N) if we need to resize\
insert: O(N)\
replace: O(1)\
get: O(1)\
size: O(1)\
isEmpty: O(1)\
contains: O(N)\
remove: O(N)\
index: O(N)\
toString: O(N)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:32:24 pm
\fs26 \
\pard\pardeftab720

\b \cf0 If you're missing any pieces of the code, give a shout, and Anna Smith can PM the code to you. As usual, it will be posted after class as well.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:32:53 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (It'll be best if you have a working copy now, though, because we'll be referring back to it for almost everything we have left to do today.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:33:15 pm
\fs26 \
\pard\pardeftab720

\b \cf4 PART 2: USING THE LIST
\b0 \cf0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:33:18 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Let's write a short program that uses our AList to manage a list of names. For example, we may want to keep track of the users who come into the classroom and determine who's here and who's not.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:33:51 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Posted on the course home page is the beginning code for such a program. It's in a file called NameManagerBeginning.java. The class inside it is NameManager. Make sure you rename the file to NameManager.java when you save it (or after you save it), so Eclipse doesn't fuss at you.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:34:29 pm
\fs26 \
\pard\pardeftab720

\b \cf0 One caveat about this program: I have all the code inside \cf4 main\cf0 . It would probably be a better design choice to make a class that manages the names in order to separate the user interface from the computation. In the interest of time, I've put things together. In a message board problem, you'll redesign the code.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:34:55 pm
\fs26 \
\pard\pardeftab720

\b \cf0 As you can see, I've given the user of the program four options. They can add a new user to the chat. They can ask if someone is present. They can remove someone from the chat (by name). Or they can just quit the program.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:35:05 pm
\fs26 \
\pard\pardeftab720

\b \cf0 There are other things we could do with this. As usual, we'll move such extra stuff to the message board. This should be enough to give you an idea how we can make use of the AList.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:35:42 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Does everybody have AList and NameManager.java by now?
\b0 \
\pard\pardeftab720
\cf3 MathWolf\cf0  
\fs20 8:36:19 pm
\fs26 \
NameManager?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:37:02 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Yeah. The file NameManagerBeginning.java is on the handouts page. Save it to your hard drive as NameManager.java (because that's the name of the public class inside).
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:37:16 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Put it in the same project folder as AList.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:37:41 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Ok. Let's start editing NameManager.java.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:37:42 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Let's start by replacing the first comment: /* make list here */. We'll call our list names. Can you give me the single line of code we need?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:37:52 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Let's start by replacing the first comment: /* make list here */. We'll call our list \cf4 names\cf0 . Can you give me the single line of code we need?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:39:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Most people did the following:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:39:30 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
AList names \cf8 =\cf0  new AList\cf5 ()\cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:39:39 pm
\fs26 \
\pard\pardeftab720

\b \cf0 This works fine. Our class is called AList. We only have the default constructor, so we call it in the usual way.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:39:47 pm
\fs26 \
\pard\pardeftab720

\b \cf0 In contrast, however, here's what I put in my code:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:39:49 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0AOPSList names \cf8 =\cf0  new AList\cf5 ()\cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:39:55 pm
\fs26 \
\pard\pardeftab720

\b \cf0 AOPSList is the interface for AList. It contains all the methods we will need.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:39:58 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The main advantage of doing it this way is that it will make it much easier to change the kind of list we're using. If we decide we have a better way of implementing the AOPSList methods, we can simply change the kind of object we're instantiating with new. All the rest of the code will work in the same way!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:40:23 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Question: Could we do the following? Why or why not?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:40:25 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
AOPSList names \cf8 =\cf0  new AOPSList\cf5 ()\cf8 ;\cf0 \
\pard\pardeftab720

\f0\b0 \cf3 MSTang\cf0  
\fs20 8:41:02 pm
\fs26 \
No initializing AOPSList\
\cf3 MathWolf\cf0  
\fs20 8:41:02 pm
\fs26 \
We can't do that\
\cf3 ScottBusche\cf0  
\fs20 8:41:02 pm
\fs26 \
No, you can't create an interface object.\
\cf3 JRY\cf0  
\fs20 8:41:02 pm
\fs26 \
No: AOPSList doesn't have a constructor\
\cf3 MathWolf\cf0  
\fs20 8:41:02 pm
\fs26 \
The interface needs to stay abstract\
\cf3 EmeraldBot\cf0  
\fs20 8:41:02 pm
\fs26 \
We cannot; you cannot use an interface directly\
\cf3 Sir_cumference\cf0  
\fs20 8:41:02 pm
\fs26 \
No, since AOPSList is an interface, you need to use ALIst.\
\cf3 manbugbeebee\cf0  
\fs20 8:41:11 pm
\fs26 \
There wouldn't be code for any of the methods\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:41:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 No, we can't. You can never instantiate an interface, since it only has abstract methods in it. We need to instantiate a specific class that implements the methods.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:41:19 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Now that we've got a list, we can use it to keep track of the names. Let's go to the if statement inside the while, and fill in the case where we add someone to the list.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:41:32 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Is there any case where we 
\i wouldn't
\i0  want to add someone?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:42:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Think in particular how the list of names for our classroom works.
\b0 \
\pard\pardeftab720
\cf3 Tungsten\cf0  
\fs20 8:42:59 pm
\fs26 \
If that person is already in the list\
\cf3 MSTang\cf0  
\fs20 8:42:59 pm
\fs26 \
If they're already in.\
\cf3 manbugbeebee\cf0  
\fs20 8:42:59 pm
\fs26 \
If they're already there?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:43:21 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Right, we wouldn't want to add a name to the list if they're already there. How could we determine if the name is already in the list?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:45:18 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (Aside: General lists, of course, are free to contain multiple copies of the same piece of data. It's just that in this particular application, we shouldn't allow it.)
\b0 \
\pard\pardeftab720
\cf3 chenjamin\cf0  
\fs20 8:45:40 pm
\fs26 \
using contains\
\cf3 MathWolf\cf0  
\fs20 8:45:40 pm
\fs26 \
contains method\
\cf3 manbugbeebee\cf0  
\fs20 8:45:40 pm
\fs26 \
with the 'contains' method\
\cf3 MSTang\cf0  
\fs20 8:45:40 pm
\fs26 \
contains\
\cf3 ScottBusche\cf0  
\fs20 8:45:40 pm
\fs26 \
Use contains!\
\cf3 puwei99\cf0  
\fs20 8:45:40 pm
\fs26 \
contains\
\cf3 Tungsten\cf0  
\fs20 8:45:40 pm
\fs26 \
Use names.contains(name)\
\cf3 ScottBusche\cf0  
\fs20 8:45:48 pm
\fs26 \
AOPSList.contains()\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:45:50 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We use the contains method for that. So can you print a message saying the username is already present when it is? If you use printf for this, make sure you add a newline character (\\n) at the end of your string.
\b0 \
\pard\pardeftab720
\cf3 Tungsten\cf0  
\fs20 8:47:33 pm
\fs26 \
\pard\pardeftab720

\f3 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf0 names.\cf10 contains\cf5 (\cf0 userName\cf5 ))\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is already there
\f1\b \cf13 \\n
\f3\b0 \cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 JRY\cf0  
\fs20 8:47:33 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 if
\f3\b0  \cf5 (\cf0 names.\cf10 contains\cf5 (\cf0 userName\cf5 ))\cf0  \cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is already there 
\f1\b \cf13 \\n
\f3\b0 \cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:47:35 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's my code with a few extra lines for context:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:47:37 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 choice.\cf10 equals\cf5 (\cf12 "add"\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 print\cf5 (\cf12 "Who do you want to add: "\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0userName \cf8 =\cf0  scan.\cf10 nextLine\cf5 ()\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 names.\cf10 contains\cf5 (\cf0 userName\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is already there\cf13 \\n\cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:47:59 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Any questions on that?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:48:25 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Now we put in the code that actually adds the name to the list. If we were going to print the list of names at any point, it might be worth keeping them in alphabetical order. We'll make that a variation for the forum.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:48:46 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Instead, for now we'll make the addition as fast as possible. So where should we insert it?
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 8:49:07 pm
\fs26 \
back\
\cf3 chenjamin\cf0  
\fs20 8:49:07 pm
\fs26 \
the back\
\cf3 MathWolf\cf0  
\fs20 8:49:07 pm
\fs26 \
addToBack\
\cf3 connor0728\cf0  
\fs20 8:49:07 pm
\fs26 \
at the end\
\cf3 MathWolf\cf0  
\fs20 8:49:07 pm
\fs26 \
Add it to the back\
\cf3 Tungsten\cf0  
\fs20 8:49:07 pm
\fs26 \
The end.\
\cf3 ScottBusche\cf0  
\fs20 8:49:11 pm
\fs26 \
At the back.\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:49:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Our addToBack method is constant time (except when we resize). The others always take linear time. So addToBack should be used. Can you finish the adding case?
\b0 \
\pard\pardeftab720
\cf3 Tungsten\cf0  
\fs20 8:50:14 pm
\fs26 \
\pard\pardeftab720

\f3 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b else
\f3\b0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0names.\cf10 addToBack\cf5 (\cf0 userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 puwei99\cf0  
\fs20 8:50:14 pm
\fs26 \
if (!(names.contains(userName))) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0names.addToBack(userName);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\cf3 JRY\cf0  
\fs20 8:50:14 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 else
\f3\b0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0   names.\cf10 addToBack\cf5 (\cf0 userName\cf5 )\cf8 ;\cf0 \
\pard\pardeftab720
\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 chenjamin\cf0  
\fs20 8:50:14 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 else
\f3\b0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0names.\cf10 addToBack\cf5 (\cf0 userName\cf5 )\cf8 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:50:17 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's mine:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:50:18 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 choice.\cf10 equals\cf5 (\cf12 "add"\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 print\cf5 (\cf12 "Who do you want to add: "\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0userName \cf8 =\cf0  scan.\cf10 nextLine\cf5 ()\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 names.\cf10 contains\cf5 (\cf0 userName\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is already there\cf13 \\n\cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0names.\cf10 addToBack\cf5 (\cf0 userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:50:34 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Now on to ask. It's actually very similar to what we just did, since we again use contains to determine if the name is there. Can you fill in the code, printing the person is present or the person is absent as appropriate?
\b0 \
\pard\pardeftab720
\cf3 Tungsten\cf0  
\fs20 8:52:20 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 if
\f3\b0  \cf5 (\cf0 names.\cf10 contains\cf5 (\cf0 userName\cf5 ))\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is in the chat
\f1\b \cf13 \\n
\f3\b0 \cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b else
\f3\b0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is not in the chat
\f1\b \cf13 \\n
\f3\b0 \cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 ScottBusche\cf0  
\fs20 8:52:20 pm
\fs26 \
\pard\pardeftab720

\f3 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b else
\f3\b0  
\f1\b if
\f3\b0  \cf5 (\cf0 choice.\cf10 equals\cf5 (\cf12 "ask"\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 print\cf5 (\cf12 "Who do you want to ask about: "\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0userName \cf8 =\cf0  scan.\cf10 nextLine\cf5 ()\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf0 names.\cf10 contains\cf5 (\cf0 userName\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is in the list.
\f1\b \cf13 \\n
\f3\b0 \cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b else
\f3\b0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is not in the list.
\f1\b \cf13 \\n
\f3\b0 \cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 chenjamin\cf0  
\fs20 8:52:20 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 if
\f3\b0 \cf5 (\cf0 names.\cf10 contains\cf5 (\cf0 userName\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is present."\cf0 , userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b else
\f3\b0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is absent."\cf0 , userName\cf5 )\cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf3 JRY\cf0  
\fs20 8:52:20 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 if
\f3\b0  \cf5 (\cf0 names.\cf10 contains\cf5 (\cf0 userName\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is present 
\f1\b \cf13 \\n
\f3\b0 \cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b else
\f3\b0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is absent 
\f1\b \cf13 \\n
\f3\b0 \cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:52:22 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's what I did:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:52:23 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else if \cf5 (\cf0 choice.\cf10 equals\cf5 (\cf12 "ask"\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 print\cf5 (\cf12 "Who do you want to ask about: "\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0userName \cf8 =\cf0  scan.\cf10 nextLine\cf5 ()\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 names.\cf10 contains\cf5 (\cf0 userName\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is present\cf13 \\n\cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is absent\cf13 \\n\cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:52:29 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Last one. We want to remove the name. Could we call names.remove(userName)?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:53:32 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Take a moment to think back what parameters we set up our remove method to receive.
\b0 \
\pard\pardeftab720
\cf3 connor0728\cf0  
\fs20 8:53:51 pm
\fs26 \
no...\
\cf3 chenjamin\cf0  
\fs20 8:53:51 pm
\fs26 \
nope\
\cf3 MSTang\cf0  
\fs20 8:53:51 pm
\fs26 \
No - names takes the index, not the string\
\cf3 puwei99\cf0  
\fs20 8:53:55 pm
\fs26 \
only index values\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:53:57 pm
\fs26 \
\pard\pardeftab720

\b \cf0 No, our remove method takes the position of the element, not its value. So we have to determine that first. What method will we use?
\b0 \
\pard\pardeftab720
\cf3 puwei99\cf0  
\fs20 8:54:24 pm
\fs26 \
we need to use index() then use remove\
\cf3 JRY\cf0  
\fs20 8:54:24 pm
\fs26 \
index(userName)\
\cf3 chenjamin\cf0  
\fs20 8:54:24 pm
\fs26 \
we use index first\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:54:26 pm
\fs26 \
\pard\pardeftab720

\b \cf0 That looks like a job for index. So find the index of userName, and then call remove with that index.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:54:35 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Do we need to do a contains check in this case?
\b0 \
\pard\pardeftab720
\cf3 connor0728\cf0  
\fs20 8:55:07 pm
\fs26 \
no\
\cf3 MathWolf\cf0  
\fs20 8:55:07 pm
\fs26 \
Not really but it is easier to read\
\cf3 Tungsten\cf0  
\fs20 8:55:15 pm
\fs26 \
No. index() returns -1 if the name is not there.\
\cf3 chenjamin\cf0  
\fs20 8:55:15 pm
\fs26 \
nope; if index returns -1, we can't remove anyways\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:55:16 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The technical answer is "No". The index method returns -1 if the element is not present. And remove doesn't do anything if given a negative index.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:55:23 pm
\fs26 \
\pard\pardeftab720

\b \cf0 That said, it would probably be good to give a response to the user when they try to delete a non-existent person. So we'll check if the index is not -1 before trying to remove.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:55:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 You've got all the pieces. Put them together to complete the case.
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 8:57:10 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 if
\f3\b0  \cf5 (\cf0 names.\cf10 contains\cf5 (\cf0 userName\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0names.\cf10 remove\cf5 (\cf0 names.\cf10 index\cf5 (\cf0 userName\cf5 ))\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 println\cf5 (\cf0 userName \cf8 +\cf0  \cf12 " has been removed."\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b else
\f3\b0  \cf7 System\cf0 .\cf10 out\cf0 .\cf10 println\cf5 (\cf0 userName \cf8 +\cf0  \cf12 " is not present"\cf5 )\cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf3 Tungsten\cf0  
\fs20 8:57:10 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf6 int
\f3\b0 \cf0  index \cf8 =\cf0  names.\cf10 index\cf5 (\cf0 userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf0 index \cf8 !=\cf0  \cf8 -\cf11 1\cf5 )\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0names.\cf10 remove\cf5 (\cf0 index\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b else
\f3\b0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "Sorry, %s is not present
\f1\b \cf13 \\n
\f3\b0 \cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf3 JRY\cf0  
\fs20 8:57:10 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf6 int
\f3\b0 \cf0  index \cf8 =\cf0  names.\cf10 index\cf5 (\cf0 userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b if
\f3\b0  \cf5 (\cf0 index \cf8 !=\cf0  \cf8 -\cf11 1\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0names.\cf10 remove\cf5 (\cf0 index\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f1\b else
\f3\b0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "%s is not there 
\f1\b \cf13 \\n
\f3\b0 \cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:57:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's how I wrote it:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:57:14 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else if \cf5 (\cf0 choice.\cf10 equals\cf5 (\cf12 "remove"\cf5 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 print\cf5 (\cf12 "Who do you want to remove: "\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0userName \cf8 =\cf0  scan.\cf10 nextLine\cf5 ()\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf6 int\cf0  spot \cf8 =\cf0  names.\cf10 index\cf5 (\cf0 userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 spot \cf8 !=\cf0  \cf8 -\cf11 1\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0names.\cf10 remove\cf5 (\cf0 spot\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 System\cf0 .\cf10 out\cf0 .\cf10 printf\cf5 (\cf12 "Sorry, %s is not present\cf13 \\n\cf12 "\cf0 , userName\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:57:32 pm
\fs26 \
\pard\pardeftab720

\b \cf0 And that finishes the program. Once you're ready, take it for a spin. Here's part of a sample run:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:57:35 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 Enter add to add someone to the chat\
Enter ask to see if someone is in the chat\
Enter remove to remove someone\
Enter quit to quit\
What is your choice? add\
Who do you want to add: Anna Smith\
Enter next command (add, ask, remove, quit): add\
Who do you want to add: vicky13\
Enter next command (add, ask, remove, quit): add\
Who do you want to add: ScottWeiss\
Enter next command (add, ask, remove, quit): add\
Who do you want to add: tlcruickshank\
Enter next command (add, ask, remove, quit): ask\
Who do you want to ask about: ScottWeiss\
ScottWeiss is present\
Enter next command (add, ask, remove, quit): ask\
Who do you want to ask about: Anna Smoth\
Anna Smoth is absent\
Enter next command (add, ask, remove, quit): ask\
Who do you want to ask about: Anna Smith\
Anna Smith is present\
Enter next command (add, ask, remove, quit): remove\
Who do you want to remove: DavePatrick\
Sorry, DavePatrick is not present\
Enter next command (add, ask, remove, quit): remove\
Who do you want to remove: ScottWeiss\
Enter next command (add, ask, remove, quit): ask\
Who do you want to ask about: ScottWeiss\
ScottWeiss is absent\
Enter next command (add, ask, remove, quit):\
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:58:21 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Let me know when you're satisfied it's working correctly, or if you need help. We still have one more topic today I'd like to get through.
\b0 \
\pard\pardeftab720
\cf3 williamyin08\cf0  
\fs20 9:00:37 pm
\fs26 \
Can we add an option for listing all current students?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:00:44 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We sure could!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:01:07 pm
\fs26 \
\pard\pardeftab720

\b \cf0 I won't right now, but that's definitely a sensible functionality to add in.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:01:31 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Okay, it looks like people are satisfied with NameManager.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:02:24 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Let's now look at what we can do to make it so our ALists can hold things other than Strings (without having to write a different class for each different type of data we could contain).
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:02:28 pm
\fs26 \
\pard\pardeftab720

\b \cf4 PART 3: MAKING IT GENERIC
\b0 \cf0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:02:29 pm
\fs26 \
\pard\pardeftab720

\b \cf0 One problem with our list is that it must take Strings as data. Suppose we didn't want a list of Strings. Instead we want a list of integers. What is the major change we would have to make our AOPSList and AList classes?
\b0 \
\pard\pardeftab720
\cf3 JRY\cf0  
\fs20 9:02:58 pm
\fs26 \
Change all the Strings to ints\
\cf3 ScottBusche\cf0  
\fs20 9:02:58 pm
\fs26 \
Change the array to and int array.\
\cf3 Tungsten\cf0  
\fs20 9:02:58 pm
\fs26 \
We would have to replace all the Strings with Integers.\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:02:59 pm
\fs26 \
\pard\pardeftab720

\b \cf0 All the occurrences of String in the code (with the exception of those in the toString method) would end up being replaced with \cf4 int\cf0 . Other than the type change, the algorithms for most of the methods work exactly the same way.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:03:05 pm
\fs26 \
\pard\pardeftab720

\b \cf0 This seems likes a lot of extra code to do pretty much the same thing twice. Instead, we can make our class \cf4 generic\cf0  so it can work with nearly any type.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:03:11 pm
\fs26 \
\pard\pardeftab720

\b \cf0 As you may recall, the ArrayList class is generic. When we create an ArrayList object, we specify what kinds of things to put in the list:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:03:14 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
ArrayList\cf8 <\cf0 String\cf8 >\cf0  myList \cf8 =\cf0  new ArrayList\cf8 <\cf0 String\cf8 >\cf5 ()\cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:03:21 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The < and > delimit the type. Any restrictions on what type we can use there?
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 9:03:56 pm
\fs26 \
Not primitive\
\cf3 puwei99\cf0  
\fs20 9:03:56 pm
\fs26 \
only reference types\
\cf3 chenjamin\cf0  
\fs20 9:03:56 pm
\fs26 \
must be objects\
\cf3 AkshajK\cf0  
\fs20 9:03:56 pm
\fs26 \
must be a class\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:04:03 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It has to be an object (a reference type). No primitive types allowed! So we can't make an ArrayList of ints. Instead we use the wrapper type Integer which only exists so we can work with ints as objects.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:04:09 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So I'll show you how to make our interface and class generic so they can work with any kind of object as well.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:04:24 pm
\fs26 \
\pard\pardeftab720

\b \cf0 If you've been entering the code as we've been working in Eclipse, go to the Package Explorer tab on the left side of the screen and open the list of files in the src folder and package of the project where your code is. Select and copy AOPSList.java. Then paste it back in the same package. It will ask you to rename the file. Call it AOPSListGeneric.java. One nice thing about this is that it will automatically rename the interface inside the code.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:04:58 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Let me know when you've done that.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:05:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 To make this code generic, we add a parameter type to the header:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:05:42 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
public interface AOPSListGeneric\cf8 <\cf0 E\cf8 >\cf0  \cf5 \{\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:06:18 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (That is to say, that's the first thing to do. :-P We still have a bunch more edits before we'll be done with this conversion.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:06:29 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Notice the < and > like in our ArrayList declaration. Here we put a name to represent the type. I called it E, which you may have seen in the ArrayList API. T is another common name for the type. Essentially it is a placeholder for whatever the user puts in the < and > when she instantiates the object.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:08:02 pm
\fs26 \
\pard\pardeftab720

\b \cf0 You could, in principle, use any valid Java variable name instead of E or T. My decision to use E is just driven by the fact that it's conventional to represent generic types in code using a single capital letter.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:08:09 pm
\fs26 \
\pard\pardeftab720

\b \cf0 How do we finish the changes?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:08:24 pm
\fs26 \
\pard\pardeftab720

\b \cf0 First of all, we replace all the occurrences of String with E. You can do this with your basic find and replace under Eclipse's edit menu:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:08:26 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
public interface AOPSListGeneric\cf8 <\cf0 E\cf8 >\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  addToFront\cf5 (\cf0 E x\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // puts x on the front of the list
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  addToBack\cf5 (\cf0 E x\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // puts x on the back
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  insert\cf5 (\cf0 E x, \cf6 int\cf0  position\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // put x into the given position
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  replace\cf5 (\cf0 E x, \cf6 int\cf0  position\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // replace given position with x
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public E get\cf5 (\cf6 int\cf0  position\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // return element in given position (or "ERROR")
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 int\cf0  size\cf5 ()\cf8 ;\cf0  
\f2\i \cf9 // how many elements are in the list
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 boolean\cf0  isEmpty\cf5 ()\cf8 ;\cf0  
\f2\i \cf9 // are there elements in the list
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 boolean\cf0  contains\cf5 (\cf0 E x\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // is x in the list?
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  remove\cf5 (\cf6 int\cf0  position\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // delete the element at given position
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 int\cf0  index\cf5 (\cf0 E x\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // returns first position of x in the list, -1 if not there
\f1\i0 \cf0 \
\pard\pardeftab720
\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:09:21 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Full disclosure: there is one more change we'll have to make. Maybe you've noticed already. If not, we'll come back to it shortly.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:09:27 pm
\fs26 \
\pard\pardeftab720

\b \cf0 But first let's go to the new version of AList. Do the copy and paste trick to make a version called AListGeneric.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:09:48 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Again, let me know when you've got that done so we can proceed.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:10:01 pm
\fs26 \
\pard\pardeftab720

\b \cf0 While I'm waiting, are there any questions?
\b0 \
\pard\pardeftab720
\cf3 williamyin08\cf0  
\fs20 9:10:29 pm
\fs26 \
What's your favorite flavor of pie?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:11:08 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Pumpkin pie, closely followed by French Silk pie (chocolate is the best!).
\b0 \
\pard\pardeftab720
\cf3 MathWolf\cf0  
\fs20 9:11:13 pm
\fs26 \
Apple\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:11:21 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Yeah, apple's good too.
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 9:11:26 pm
\fs26 \
You should have said Math pie\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:11:30 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Ha!
\b0 \
\pard\pardeftab720
\cf3 Tungsten\cf0  
\fs20 9:11:33 pm
\fs26 \
What's your favourite number?\
\cf3 williamyin08\cf0  
\fs20 9:11:37 pm
\fs26 \
*pi\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:11:51 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Looks like williamyin08 answered Tungsten's question perfectly.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:12:01 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Ok! I think we're ready to press on!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:12:03 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What should the new header line of this class be?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:12:43 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Don't forget we have an interface to implement!
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 9:12:54 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b class
\f3\b0  AListGeneric\cf8 <\cf0 E\cf8 >\cf0  
\f1\b implements
\f3\b0  AOPSListGeneric\cf8 <\cf0 E\cf8 >\cf0 \
\pard\pardeftab720

\f0 \cf3 puwei99\cf0  
\fs20 9:12:54 pm
\fs26 \
public class AListGeneric <E> implements AOPSListGeneric<E>\
\cf3 ScottBusche\cf0  
\fs20 9:12:54 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 public
\f3\b0  
\f1\b class
\f3\b0  AListGeneric 
\f1\b implements
\f3\b0  AOPSListGeneric \cf5 \{\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:12:56 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
public class AListGeneric\cf8 <\cf0 E\cf8 >\cf0  implements AOPSListGeneric\cf8 <\cf0 E\cf8 >\cf0  \cf5 \{\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:13:01 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Note the two uses of <E> here. We need it in both the interface and the class.
\b0 \
\pard\pardeftab720
\cf3 chutney\cf0  
\fs20 9:13:09 pm
\fs26 \
public class AListGeneric<E> implements AOPSListGeneric\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:13:12 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Now we can do a search and replace of String with E. Note that you do \cf4 not\cf0  want to change the three occurrences of String that are in the toString method.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:13:26 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (So don't do a Replace All.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:13:43 pm
\fs26 \
\pard\pardeftab720

\b \cf0 If you've done the replacements other than in toString, you will notice there are red lines in the code. Where's the first such red line?
\b0 \
\pard\pardeftab720
\cf3 Tungsten\cf0  
\fs20 9:15:03 pm
\fs26 \
Line 16, where we declare this.array\
\cf3 MSTang\cf0  
\fs20 9:15:03 pm
\fs26 \
Do we make array an E[]?\
\cf3 chenjamin\cf0  
\fs20 9:15:03 pm
\fs26 \
cannot create a generic array of e\
\cf3 JRY\cf0  
\fs20 9:15:11 pm
\fs26 \
Initializing this.array: cannot create a generic array of E\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:15:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 In the instantiation of the array in the constructor. If you hover over the line, Eclipse tells you that it can't instantiate a generic array.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:15:17 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The problem is that when Java creates an array, it needs to know how big each space is so it allocates enough room for the entire thing. Without knowing the precise type, it can't decide how much to use.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:15:22 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The good news is we can use a specific type that should take up the same room as we would use for E. Can you think what it is?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:16:01 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Think of some kind of super general object we could use. Something we know every object in Java is going to be.
\b0 \
\pard\pardeftab720
\cf3 Tungsten\cf0  
\fs20 9:16:15 pm
\fs26 \
Object!\
\cf3 puwei99\cf0  
\fs20 9:16:15 pm
\fs26 \
Object?\
\cf3 chenjamin\cf0  
\fs20 9:16:15 pm
\fs26 \
Object/\
\cf3 MSTang\cf0  
\fs20 9:16:15 pm
\fs26 \
Object\
\cf3 PiCrazy31415\cf0  
\fs20 9:16:15 pm
\fs26 \
Object\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:16:17 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Remember E must be an object, so we can use the type Object here. So that gives us these attributes:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:16:21 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0private \cf7 Object\cf0  \cf5 []\cf0  array\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0private \cf6 int\cf0  capacity\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0private \cf6 int\cf0  size\cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:16:26 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Note that capacity and size are numbers so they remain as ints.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:16:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 And here's the new constructor:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:16:29 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public AListGeneric\cf5 ()\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 capacity\cf0  \cf8 =\cf0  \cf11 10\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 array\cf0  \cf8 =\cf0  new \cf7 Object\cf5 [\cf0 this.\cf10 capacity\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 size\cf0  \cf8 =\cf0  \cf11 0\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:16:34 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Where else do we have to change E to Object?
\b0 \
\pard\pardeftab720
\cf3 PiCrazy31415\cf0  
\fs20 9:18:05 pm
\fs26 \
resize\
\cf3 JRY\cf0  
\fs20 9:18:05 pm
\fs26 \
In resize\
\cf3 Tungsten\cf0  
\fs20 9:18:05 pm
\fs26 \
resize()\
\cf3 chenjamin\cf0  
\fs20 9:18:05 pm
\fs26 \
the resize method\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:18:07 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We also allocate an array in resize, so that new must be changed as well:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:18:09 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0private \cf6 void\cf0  resize\cf5 ()\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf7 Object\cf0  \cf5 []\cf0  newArray \cf8 =\cf0  new \cf7 Object\cf5 [\cf11 2\cf8 *\cf0 this.\cf10 capacity\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0for \cf5 (\cf6 int\cf0  i \cf8 =\cf0  \cf11 0\cf8 ;\cf0  i \cf8 <\cf0  this.\cf10 size\cf8 ;\cf0  i\cf8 ++\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0newArray\cf5 [\cf0 i\cf5 ]\cf0  \cf8 =\cf0  this.\cf10 array\cf5 [\cf0 i\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 array\cf0  \cf8 =\cf0  newArray\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0this.\cf10 capacity\cf0  \cf8 *=\cf0  \cf11 2\cf8 ;\cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:18:17 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Any other methods have red lines?
\b0 \
\pard\pardeftab720
\cf3 chenjamin\cf0  
\fs20 9:18:33 pm
\fs26 \
in the resize method and the get method\
\cf3 PiCrazy31415\cf0  
\fs20 9:18:33 pm
\fs26 \
get\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:18:42 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Our get method has a few problems. The first is with the return in the case where the position is valid. What's the issue there?
\b0 \
\pard\pardeftab720
\cf3 chenjamin\cf0  
\fs20 9:19:43 pm
\fs26 \
we need to return an E\
\cf3 MSTang\cf0  
\fs20 9:19:43 pm
\fs26 \
array[n] is not an E\
\cf3 puwei99\cf0  
\fs20 9:19:43 pm
\fs26 \
we must return an object of type E but Java just thinks that we are returning a random object\
\cf3 Tungsten\cf0  
\fs20 9:19:43 pm
\fs26 \
The method needs to return an E, but instead returns an Object.\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:19:46 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We're returning an Object, but the method expects us to return E. We know that the Objects in the array are actually of type E, but, of course, Java doesn't realize this. What do we have to do to fix it?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:20:22 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (What can we do to tell Java that the thing we're returning actually is an E type and not an Object?)
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 9:20:37 pm
\fs26 \
typecast\
\cf3 Dragon18\cf0  
\fs20 9:20:37 pm
\fs26 \
change Object to E?\
\cf3 puwei99\cf0  
\fs20 9:20:37 pm
\fs26 \
typecasting\
\cf3 PiCrazy31415\cf0  
\fs20 9:20:37 pm
\fs26 \
cast into E\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:20:39 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We use our old friend typecasting:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:20:44 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public E get\cf5 (\cf6 int\cf0  position\cf5 )\cf0  throws NoSuchListElementException\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 position \cf8 >=\cf0  \cf11 0\cf0  \cf8 &&\cf0  position \cf8 <=\cf0  this.\cf10 size\cf0  \cf8 -\cf0  \cf11 1\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return \cf5 (\cf0 E\cf5 )\cf0 this.\cf10 array\cf5 [\cf0 position\cf5 ]\cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:20:55 pm
\fs26 \
\pard\pardeftab720

\b \cf0 That makes our line turn from red to yellow. Eclipse is warning us that we may not be able to make the element something of type E. This is true in general, but as I said, we know the cast is safe. If you don't like the yellow line, you can choose the quick fix that adds a notation to the code to suppress the warning.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:21:04 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The other problem is a little more troubling. What's the issue with the else case?
\b0 \
\pard\pardeftab720
\cf3 spower4\cf0  
\fs20 9:23:06 pm
\fs26 \
the string error is printed as a return\
\cf3 puwei99\cf0  
\fs20 9:23:06 pm
\fs26 \
returns a string\
\cf3 JRY\cf0  
\fs20 9:23:06 pm
\fs26 \
We can't return "Error" because it's a String\
\cf3 MSTang\cf0  
\fs20 9:23:06 pm
\fs26 \
returns a string - we should raise an error\
\cf3 ReciterOfPi\cf0  
\fs20 9:23:06 pm
\fs26 \
It's a string\
\cf3 spower4\cf0  
\fs20 9:23:06 pm
\fs26 \
it prints a string instead of E\
\cf3 Tungsten\cf0  
\fs20 9:23:06 pm
\fs26 \
We can't return a String on a method that returns Es.\
\cf3 PiCrazy31415\cf0  
\fs20 9:23:06 pm
\fs26 \
returns string\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:23:08 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We were returning a String, but now we can't, since E may not be String. And simply typecasting "ERROR" to an E won't work.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:23:31 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Any ideas what we can do instead?
\b0 \
\pard\pardeftab720
\cf3 ScottBusche\cf0  
\fs20 9:23:36 pm
\fs26 \
return -1?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:23:42 pm
\fs26 \
\pard\pardeftab720

\b \cf0 That, sadly, won't work.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:23:55 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We don't want to mess up the fact that this method returns objects of type E.
\b0 \
\pard\pardeftab720
\cf3 MSTang\cf0  
\fs20 9:24:13 pm
\fs26 \
Create an exception\
\cf3 Tungsten\cf0  
\fs20 9:24:13 pm
\fs26 \
We could throw an exception...\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:24:27 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (We can't just not return. Java won't like that either.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:24:29 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Since we want to abort the method in the case of a bad situation, that implies we need to use an exception. Here's code for a class we can use:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:24:37 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
public class NoSuchListElementException extends \cf7 Exception\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0public NoSuchListElementException\cf5 ()\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0super\cf5 ()\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0   \
\'a0\'a0\'a0\'a0public NoSuchListElementException\cf5 (\cf7 String\cf0  mesg\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0super\cf5 (\cf0 mesg\cf5 )\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720
\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:24:49 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What do we need to change in the else case of get?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:26:02 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (With only 5 minutes left, I think we'll save what I prepared to say about linked lists until next week. On the bright side, we'll be ending on time today!)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:26:27 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We want to do something with exceptions in this else case...
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:26:32 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Nothing fancy...
\b0 \
\pard\pardeftab720
\cf3 JRY\cf0  
\fs20 9:26:56 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 throw
\f3\b0  
\f1\b new
\f3\b0  \cf7 NoSuchElementException\cf5 ()\cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf3 ReciterOfPi\cf0  
\fs20 9:26:56 pm
\fs26 \
make a NoSuchListElementException with a mesg of "I don't see this element." and return that.\
\cf3 Tungsten\cf0  
\fs20 9:26:59 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 throw
\f3\b0  
\f1\b new
\f3\b0  NoSuchListElementException\cf5 ()\cf8 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:27:01 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We throw the exception:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:27:03 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 position \cf8 >=\cf0  \cf11 0\cf0  \cf8 &&\cf0  position \cf8 <=\cf0  this.\cf10 size\cf0  \cf8 -\cf0  \cf11 1\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return \cf5 (\cf0 E\cf5 )\cf0 this.\cf10 array\cf5 [\cf0 position\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0throw new NoSuchListElementException\cf5 ()\cf8 ;\cf0 \
\pard\pardeftab720

\f0\b0 \cf3 puwei99\cf0  
\fs20 9:27:06 pm
\fs26 \
throw new NoSuchListElementException();\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:27:07 pm
\fs26 \
\pard\pardeftab720

\b \cf0 But this gives us red lines. What else do we have to do?
\b0 \
\pard\pardeftab720
\cf3 Tungsten\cf0  
\fs20 9:27:36 pm
\fs26 \
Add a throws declaration to get()\
\cf3 JRY\cf0  
\fs20 9:27:36 pm
\fs26 \
add a throws statement to the method header\
\cf3 MSTang\cf0  
\fs20 9:27:36 pm
\fs26 \
specify the method can throw it\
\cf3 chutney\cf0  
\fs20 9:27:36 pm
\fs26 \
throws keyword?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:27:38 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We have to tell Java that the method can throw the exception, so that means we have to change the header line:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:27:39 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public E get\cf5 (\cf6 int\cf0  position\cf5 )\cf0  throws NoSuchListElementException\cf5 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf5 (\cf0 position \cf8 >=\cf0  \cf11 0\cf0  \cf8 &&\cf0  position \cf8 <=\cf0  this.\cf10 size\cf0  \cf8 -\cf0  \cf11 1\cf5 )\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0return \cf5 (\cf0 E\cf5 )\cf0 this.\cf10 array\cf5 [\cf0 position\cf5 ]\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0throw new NoSuchListElementException\cf5 ()\cf8 ;\cf0 \
\'a0\'a0\'a0\'a0\cf5 \}\cf0 \
\pard\pardeftab720

\f0\b0 \cf3 williamyin08\cf0  
\fs20 9:27:51 pm
\fs26 \
Wait, where do we put the NoSuchListElementException class? In a new class file?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:28:46 pm
\fs26 \
\pard\pardeftab720

\b \cf0 A valid Java file can contain at most one public class. The file we're working in already has a public class, so the definition of NoSuchListElementException will have to go in its own file, yes.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:29:17 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Put it in the same project folder though.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:29:18 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Even with the header change, Java still shows an error. Why?
\b0 \
\pard\pardeftab720
\cf3 PiCrazy31415\cf0  
\fs20 9:29:44 pm
\fs26 \
AOPSList interface doesn't have exceptions\
\cf3 Tungsten\cf0  
\fs20 9:29:44 pm
\fs26 \
We need to add a throws declaration to get() in AOPSListGeneric.\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:29:47 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Because the method does not match the one given in the AOPSListGeneric interface. Remember we need an exact header match. Fortunately, Eclipse gives us a quick fix to add the throws line to the interface's header. After that, the interface should look like this:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:29:54 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
public interface AOPSListGeneric\cf8 <\cf0 E\cf8 >\cf0  \cf5 \{\cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  addToFront\cf5 (\cf0 E x\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // puts x on the front of the list
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  addToBack\cf5 (\cf0 E x\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // puts x on the back
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  insert\cf5 (\cf0 E x, \cf6 int\cf0  position\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // put x into the given position
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  replace\cf5 (\cf0 E x, \cf6 int\cf0  position\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // replace given position with x
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public E get\cf5 (\cf6 int\cf0  position\cf5 )\cf0  throws NoSuchListElementException\cf8 ;\cf0  
\f2\i \cf9 // return element in given position (or throws exception)
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 int\cf0  size\cf5 ()\cf8 ;\cf0  
\f2\i \cf9 // how many elements are in the list
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 boolean\cf0  isEmpty\cf5 ()\cf8 ;\cf0  
\f2\i \cf9 // are there elements in the list
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 boolean\cf0  contains\cf5 (\cf0 E x\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // is x in the list?
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 void\cf0  remove\cf5 (\cf6 int\cf0  position\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // delete the element at given position
\f1\i0 \cf0 \
\'a0\'a0\'a0\'a0public \cf6 int\cf0  index\cf5 (\cf0 E x\cf5 )\cf8 ;\cf0  
\f2\i \cf9 // returns first position of x in the list, -1 if not there
\f1\i0 \cf0 \
\pard\pardeftab720
\cf5 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:30:06 pm
\fs26 \
\pard\pardeftab720

\b \cf0 And that should wrap up the generic version of the class. We can easily adapt our NameManager class to use it. It just requires a one-line change. Can you do it?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:30:33 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Since time is up, I'll just say the answer.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:30:35 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We just have to create an object of the generic class. At this point, we specify the type of the stored objects as Strings:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:30:37 pm
\fs26 \
\pard\pardeftab720

\f1\b \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0AOPSListGeneric\cf8 <\cf0 String\cf8 >\cf0  names \cf8 =\cf0  new AListGeneric\cf8 <\cf0 String\cf8 >\cf5 ()\cf8 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:30:43 pm
\fs26 \
\pard\pardeftab720

\b \cf0 All the other code can remain as is.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:30:45 pm
\fs26 \
\pard\pardeftab720

\b \cf4 PART 4: SUMMARY
\b0 \cf0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:30:46 pm
\fs26 \
\pard\pardeftab720

\b \cf0 In today's class, we've completed our first home-grown data structure: the dynamic array.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:30:58 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We've analyzed the running time of each method.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:31:01 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We've seen how we can use our class in its own program.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:31:05 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We've looked at how to create a generic version that can store data of any type.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:31:17 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Next week, we'll look at another way to implement the list interface (called a \cf4 linked list\cf0 ).}