{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fnil\fcharset0 Verdana;\f1\fswiss\fcharset0 Helvetica;\f2\fmodern\fcharset0 Courier;
\f3\fmodern\fcharset0 Courier-Bold;\f4\fmodern\fcharset0 Courier-BoldOblique;\f5\fmodern\fcharset0 Courier-Oblique;
\f6\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red115\green0\blue2;\red251\green0\blue7;
\red1\green32\blue135;\red43\green139\blue39;\red18\green139\blue2;\red0\green0\blue255;\red83\green83\blue83;
\red11\green85\blue38;\red190\green74\blue193;\red0\green0\blue83;\red10\green82\blue135;\red38\green38\blue38;
\red196\green196\blue196;\red249\green249\blue249;\red11\green86\blue1;\red154\green151\blue213;\red87\green197\blue83;
\red133\green35\blue39;\red162\green165\blue6;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid201\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid301\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid401\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid501\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid601\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid701\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid801\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid901\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1001\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid12}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs26 \cf2 dkneezel
\b0 \cf0  
\fs20 7:31:20 pm
\fs26 \
\pard\pardeftab720

\b \cf0 As I said earlier, sorry we're a bit behind on the grading. We'll get caught up over the holidays (hopefully not too sluggishly) and try to keep up from there.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:31:28 pm
\fs26 \
\pard\pardeftab720

\b \cf3 Java Programming with Data Structures Week 10: GUIs
\b0 \cf0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:31:51 pm
\fs26 \
\pard\pardeftab720

\b \cf0 For this week's installment, we will be going back to writing non-console-based applications. Our programs will appear in their own window, and we'll interact with them solely through that window. This is called a \cf3 GUI\cf0 , which stands for Graphical User Interface.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:31:53 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We've seen the term "interface" recently in this course. Do you remember where?
\b0 \
\pard\pardeftab720
\cf4 JRY\cf0  
\fs20 7:33:30 pm
\fs26 \
last week\
\cf4 connor0728\cf0  
\fs20 7:33:30 pm
\fs26 \
java interface?\
\cf4 EmeraldBot\cf0  
\fs20 7:33:30 pm
\fs26 \
Interfaces, as in completely abstract classes\
\cf4 Tungsten\cf0  
\fs20 7:33:30 pm
\fs26 \
Last week, when we did Interfaces.\
\cf4 bluebandit21\cf0  
\fs20 7:33:30 pm
\fs26 \
from last week\
\cf4 eyl766\cf0  
\fs20 7:33:36 pm
\fs26 \
completely abstract classes\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:33:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Java defines an interface as a sort of abstract class. It allows us to specify the methods that a particular class would have to support.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:34:04 pm
\fs26 \
\pard\pardeftab720

\b \cf0 How is that kind of interface similar to the interface you get with a program \'96 the buttons, menus, and so forth?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:35:05 pm
\fs26 \
\pard\pardeftab720

\b \cf0 If I say that my class implements a certain interface (like from last week) what am I promising?
\b0 \
\pard\pardeftab720
\cf4 ReciterOfPi\cf0  
\fs20 7:36:07 pm
\fs26 \
That the class will have the methods in the interface?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:36:35 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Yeah, an interface (for classes, like we discussed last week) is just a promise that certain methods will be implemented.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:37:08 pm
\fs26 \
\pard\pardeftab720

\b \cf0 That is to say, coming back to my original question about interfaces versus buttons: In both cases, the interface specifies how one can interact with a particular thing. The Java interface tells you what methods you're allowed to call to make the object work. The GUI indicates what elements to click on to cause a certain effect.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:37:35 pm
\fs26 \
\pard\pardeftab720

\b \cf0 There are lots of components to programs with GUIs. I'm going to illustrate how they work by building from scratch a complete example.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:38:06 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (A simple example, but complete nonetheless.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:38:08 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We're going to simulate a vending machine. Our machine will sell three different kinds of soda. The user clicks buttons corresponding to putting in a nickel, dime, or quarter. There's also a button to get your change back.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:38:21 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Each soda costs sixty cents. Once the user has entered at least that amount, the user can click on one of the three types of soda. The program will then tell them what kind of soda they got and how much change they get back. The amount of change in the machine is then reset. If there isn't enough for a soda, there's a message telling the user how much more change is needed.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:38:55 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Also there are only two cans of soda per slot (it's not a big machine). If the user tries to take a soda that's out of stock, the program will report a message.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:39:02 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's a screen shot:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:39:05 pm
\fs26 \
\pard\pardeftab720

\b \cf0 \
\pard\pardeftab720

\f1\b0\fs24 \cf0 {{\NeXTGraphic vendingDone.png \width7500 \height6750 \noorient
}¬}\pard\pardeftab720

\f0\fs26 \cf0 \

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:39:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (I'll be referring to this image a few times as we write, so double click it to pop it out as a window so you can take a look at it when you need to.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:40:00 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (You might also want to double click the descriptions I put in the sticky box at the top of the classroom as well.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:40:11 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Sounds like a lot to do! Make a new project, and follow along. Full code will be posted after class too.
\b0 \
\pard\pardeftab720
\cf4 AkshajK\cf0  
\fs20 7:40:14 pm
\fs26 \
How do we get it all fancy?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:40:30 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We'll be spending the next 110 minutes discussing how!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:40:35 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (Note: We will put the images of the soda cans in last. You can go ahead and grab the image files from the Handouts tab on the course homepage now if you want. The files you need are the ones at the bottom of the page with the file extension .png. Just save them somewhere on your machine that's easy for you to get to -- your desktop, for example -- and we'll worry about them in about 90 minutes or so.)
\b0 \
\pard\pardeftab720
\cf4 eyl766\cf0  
\fs20 7:41:52 pm
\fs26 \
what should we call the file?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:42:11 pm
\fs26 \
\pard\pardeftab720

\b \cf0 I'll give recommendations for what to call your classes. For now just create a new project.
\b0 \
\pard\pardeftab720
\cf4 adrianu\cf0  
\fs20 7:42:15 pm
\fs26 \
if we work in windows, mac, linux, or any other os, how could we use the "system buttons" in our java program\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:42:19 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We'll get to that.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:43:07 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Java makes this part system independent. That's one of the nice things about programming in Java with its "Virtual Machine" which lets you not worry so much about what real-world machine your program is running on.
\b0 \
\pard\pardeftab720
\cf4 AkshajK\cf0  
\fs20 7:43:20 pm
\fs26 \
in the hierarchy of project/package/class, is there anything above project?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:43:43 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Projects are just directories inside whatever folder you set up as your workspace folder.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:43:50 pm
\fs26 \
\pard\pardeftab720

\b \cf3 PART 1: BASIC SETUP
\b0 \cf0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:43:52 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Make a new class called Machine. It should have a main method.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:44:03 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Most of the things we'll do in main are exactly the same as what we did back in week 3 with simple drawing. First we need to create an object to act as our window. Does anyone remember what class we use for that?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:45:12 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Well, it's either JFrame or JPanel. Which one though? Which one represents the window that you can actually drag around the screen and resize and all that?
\b0 \
\pard\pardeftab720
\cf4 MSTang\cf0  
\fs20 7:45:28 pm
\fs26 \
JFrame\
\cf4 chutney\cf0  
\fs20 7:45:28 pm
\fs26 \
JFrame\
\cf4 JRY\cf0  
\fs20 7:45:28 pm
\fs26 \
JFrame\
\cf4 MathWolf\cf0  
\fs20 7:45:28 pm
\fs26 \
JFrame\
\cf4 connor0728\cf0  
\fs20 7:45:28 pm
\fs26 \
JFrame\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:45:36 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It's called JFrame. So we need to declare a JFrame variable and construct the associated object. Remember the constructor can take the title of the window as a String. Can you supply the code?
\b0 \
\pard\pardeftab720
\cf4 spower4\cf0  
\fs20 7:46:51 pm
\fs26 \
JFrame window = new JFrame("Graphics");\
\cf4 Tungsten\cf0  
\fs20 7:46:51 pm
\fs26 \
\pard\pardeftab720

\f2 \cf5 JFrame\cf0  window \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JFrame\cf7 (\cf8 "Vending Machine"\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 puwei99\cf0  
\fs20 7:46:51 pm
\fs26 \
JFrame window = new JFrame("Vending Machine");\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:47:08 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's what I have:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:47:09 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0\cf5 JFrame\cf0  outputFrame \cf6 =\cf0  new \cf5 JFrame\cf7 (\cf8 "Vending Machine"\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // the window
\f3\i0 \cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 7:47:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 You'll need to import javax.swing.JFrame; at the top. Actually, you may as well import javax.swing.*; as there will be several things we'll need from the package.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:47:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Next we need to make sure we can close the window when the user clicks the x in the upper right. How do we do that?
\b0 \
\pard\pardeftab720
\cf4 spower4\cf0  
\fs20 7:48:39 pm
\fs26 \
window.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\
\cf4 chenjamin\cf0  
\fs20 7:48:39 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 window.\cf10 setDefaultCloseOperation\cf7 (\cf5 JFrame\cf0 .\cf10 EXIT_ON_CLOSE\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 Tungsten\cf0  
\fs20 7:48:39 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 window.\cf10 setDefaultCloseOperation\cf7 (\cf5 JFrame\cf0 .\cf10 EXIT_ON_CLOSE\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 AkshajK\cf0  
\fs20 7:48:39 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 outputFrame.\cf10 setDefaultCloseOperation\cf7 (\cf0 I don\cf8 't remember what goes here);\cf0 \
\pard\pardeftab720

\f0 \cf4 connor0728\cf0  
\fs20 7:48:39 pm
\fs26 \
outputFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\
\cf4 ScottBusche\cf0  
\fs20 7:48:39 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 outputFrame.\cf10 setDefaultCloseOperation\cf7 (\cf5 JFrame\cf0 .\cf10 EXIT_ON_CLOSE\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:48:45 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's the code:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:48:47 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0outputFrame.\cf10 setDefaultCloseOperation\cf7 (\cf5 JFrame\cf0 .\cf10 EXIT_ON_CLOSE\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 7:49:05 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Notice the use of the static constant from the JFrame class. Our next step is to set the size of the window. In my screenshot, it's 500x450. Do you remember how? If not, you can probably guess.
\b0 \
\pard\pardeftab720
\cf4 MSTang\cf0  
\fs20 7:49:56 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 frame.\cf10 setSize\cf7 (\cf11 500\cf0 , \cf11 450\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 spower4\cf0  
\fs20 7:49:56 pm
\fs26 \
window.setSize(500, 450);\
\cf4 ReciterOfPi\cf0  
\fs20 7:49:56 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 outputFrame.\cf10 setSize\cf7 (\cf11 450\cf0 , \cf11 500\cf7 )\cf6 ;\cf0  
\f5\i \cf9 //?
\f2\i0 \cf0 \
\pard\pardeftab720

\f0 \cf4 Tungsten\cf0  
\fs20 7:49:56 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 window.\cf10 setSize\cf7 (\cf11 500\cf0 , \cf11 400\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 JRY\cf0  
\fs20 7:49:56 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 outputFrame.\cf10 setSize\cf7 (\cf11 500\cf0 ,\cf11 450\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 connor0728\cf0  
\fs20 7:49:56 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 outputFrame.\cf10 setSize\cf7 (\cf11 500\cf0 ,\cf11 450\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 chutney\cf0  
\fs20 7:49:56 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 outputFrame.\cf10 setSize\cf7 (\cf11 500\cf0 ,\cf11 450\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 chenjamin\cf0  
\fs20 7:49:56 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 window.\cf10 setSize\cf7 (\cf11 500\cf0 , \cf11 450\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:50:05 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
   outputFrame.\cf10 setSize\cf7 (\cf11 500\cf0 , \cf11 450\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 7:50:08 pm
\fs26 \
\pard\pardeftab720

\b \cf0 And the last thing we need to do is make sure the user can see the window on the screen:
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 7:50:50 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 window.\cf10 setVisible\cf7 (
\f3\b \cf12 true
\f2\b0 \cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 MSTang\cf0  
\fs20 7:50:50 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 frame.\cf10 setVisible\cf7 (
\f3\b \cf12 true
\f2\b0 \cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 spower4\cf0  
\fs20 7:50:50 pm
\fs26 \
window.setVisible(true);\
\cf4 ScottBusche\cf0  
\fs20 7:50:50 pm
\fs26 \
outputFrame.setVisible(true);\
\cf4 chenjamin\cf0  
\fs20 7:50:50 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 window.\cf10 setVisible\cf7 (
\f3\b \cf12 true
\f2\b0 \cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 connor0728\cf0  
\fs20 7:50:50 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 outputFrame.\cf10 setVisible\cf7 (
\f3\b \cf12 true
\f2\b0 \cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 MathWolf\cf0  
\fs20 7:50:50 pm
\fs26 \
window.setVisible(true);\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:50:55 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0outputFrame.\cf10 setVisible\cf7 (\cf12 true\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 7:50:57 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So here\'92s what we\'92ve got so far:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:50:59 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
import \cf13 java.awt.*\cf6 ;\cf0 \
public class Machine \cf7 \{\cf0 \
  public static \cf12 void\cf0  main\cf7 (\cf5 String\cf7 []\cf0  args\cf7 )\cf0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0
\f4\i \cf9 // create a frame object
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0\cf5 JFrame\cf0  outputFrame \cf6 =\cf0  new \cf5 JFrame\cf7 (\cf8 "Vending Machine"\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // the window
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0 
\f4\i \cf9 // specify action to take on a close
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0outputFrame.\cf10 setDefaultCloseOperation\cf7 (\cf5 JFrame\cf0 .\cf10 EXIT_ON_CLOSE\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0
\f4\i \cf9 // specify size of window
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0outputFrame.\cf10 setSize\cf7 (\cf11 500\cf0 , \cf11 450\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0
\f4\i \cf9 // make window visible
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0outputFrame.\cf10 setVisible\cf7 (\cf12 true\cf7 )\cf6 ;\cf0 \
  \cf7 \}\cf0 \
\pard\pardeftab720
\cf7 \}\cf0 \
\pard\pardeftab720

\f0\b0 \cf4 ScottBusche\cf0  
\fs20 7:51:34 pm
\fs26 \
java.awt.* or javax.swing.*?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:52:16 pm
\fs26 \
\pard\pardeftab720

\b \cf0 That should have been swing.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:52:22 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Let me fix that.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:52:48 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
import \cf13 javax.swing.*\cf6 ;\cf0 \
public class Machine \cf7 \{\cf0 \
  public static \cf12 void\cf0  main\cf7 (\cf5 String\cf7 []\cf0  args\cf7 )\cf0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0
\f4\i \cf9 // create a frame object
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0\cf5 JFrame\cf0  outputFrame \cf6 =\cf0  new \cf5 JFrame\cf7 (\cf8 "Vending Machine"\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // the window
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0 
\f4\i \cf9 // specify action to take on a close
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0outputFrame.\cf10 setDefaultCloseOperation\cf7 (\cf5 JFrame\cf0 .\cf10 EXIT_ON_CLOSE\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0
\f4\i \cf9 // specify size of window
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0outputFrame.\cf10 setSize\cf7 (\cf11 500\cf0 , \cf11 450\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0
\f4\i \cf9 // make window visible
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0outputFrame.\cf10 setVisible\cf7 (\cf12 true\cf7 )\cf6 ;\cf0 \
  \cf7 \}\cf0 \
\pard\pardeftab720
\cf7 \}\cf0 \
\pard\pardeftab720

\f0\b0 \cf4 Wilderc\cf0  
\fs20 7:52:59 pm
\fs26 \
Even Dan Kneezel makes mistakes\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:53:15 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Indeed.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:53:19 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Run the code now to make sure you've got everything entered correctly. You should have a blank window with "Vending Machine" in the title. Close the window, and go back to Eclipse.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:53:46 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What did we add in at this point to our drawing programs? What kind of object did we make?
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 7:54:16 pm
\fs26 \
A JPanel.\
\cf4 MathWolf\cf0  
\fs20 7:54:16 pm
\fs26 \
A JPanel\
\cf4 chenjamin\cf0  
\fs20 7:54:16 pm
\fs26 \
JPanel\
\cf4 ReciterOfPi\cf0  
\fs20 7:54:16 pm
\fs26 \
A JPanel?\
\cf4 MathWolf\cf0  
\fs20 7:54:16 pm
\fs26 \
And a JPanel\
\cf4 want2learn\cf0  
\fs20 7:54:16 pm
\fs26 \
JPanel\
\cf4 puwei99\cf0  
\fs20 7:54:26 pm
\fs26 \
a JPanel object\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:54:32 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The class we were writing was always a subclass of JPanel. We added an object of that class to the JFrame, and then we overrode paintComponent to show the drawing we wanted.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:54:46 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We'll again use JPanels here to display the different aspects of the GUI. Look at my screenshot. How many sections does my GUI have? By "section", I mean an area of the screen with related text, images, or components. (The number you come up with will depend on what you count as sections. Just make your best guess. It's okay if the number you come up with might be different from what I have in mind.)
\b0 \
\pard\pardeftab720
\cf4 want2learn\cf0  
\fs20 7:55:36 pm
\fs26 \
5\
\cf4 ScottBusche\cf0  
\fs20 7:55:36 pm
\fs26 \
3\
\cf4 ReciterOfPi\cf0  
\fs20 7:55:36 pm
\fs26 \
3 sections, right?\
\cf4 piis3141592653\cf0  
\fs20 7:55:36 pm
\fs26 \
7\
\cf4 bluebandit21\cf0  
\fs20 7:55:36 pm
\fs26 \
12?\
\cf4 teachm\cf0  
\fs20 7:55:36 pm
\fs26 \
20\
\cf4 k77frank\cf0  
\fs20 7:55:36 pm
\fs26 \
5\
\cf4 JesseLin\cf0  
\fs20 7:55:36 pm
\fs26 \
10\
\cf4 piis3141592653\cf0  
\fs20 7:55:36 pm
\fs26 \
15\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:55:38 pm
\fs26 \
\pard\pardeftab720

\b \cf0 There are a couple of ways we can count, but I'll say we're using four sections. The top section shows messages and has the change-making buttons. The other three sections are for each of the types of soda.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:55:50 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Each of these four sections will be its own panel. We will make two subclasses of JPanel and add objects of those classes to our JFrame.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:56:02 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Why two subclasses and not four? In other words, why am I saying that our graphical interface will have two different kinds of JPanels rather than the four we might naively expect since there are four different sections in the window?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:56:31 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What do some of those sections have in common?
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 7:56:54 pm
\fs26 \
The 3 soda sections are almost identical/\
\cf4 chenjamin\cf0  
\fs20 7:56:54 pm
\fs26 \
we can use the same subclass for all three of the soda sections\
\cf4 JRY\cf0  
\fs20 7:56:54 pm
\fs26 \
The three soda sections can use the same type of JPanel\
\cf4 puwei99\cf0  
\fs20 7:56:54 pm
\fs26 \
one subclass just has soda in it\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:56:56 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The three soda sections are very similar in their structure. So we can have one class for Soda panels, and instantiate it three times.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:57:10 pm
\fs26 \
\pard\pardeftab720

\b \cf0 But we'll begin by making the JPanel subclass that models the area that deals with change.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:57:36 pm
\fs26 \
\pard\pardeftab720

\b \cf0 In general, it can be hard to deal with change, but it won't be in this case. 
\f1\b0\fs24 {{\NeXTGraphic tongue.gif \width320 \height320 \noorient
}¬}
\f0\fs26 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:57:40 pm
\fs26 \
\pard\pardeftab720

\b \cf3 PART 2: MAKING CHANGE I: TEXT FIELDS
\b0 \cf0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:57:42 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Make a new class called ChangeBin. This will be the piece of code we write to represent the text stuff going on right at the top of our vending machine JFrame. As I said, it should extend JPanel. If you're not having Eclipse fill things in, remember to import javax.swing.*;
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:58:36 pm
\fs26 \
\pard\pardeftab720

\b \cf0 As I said, we're going to see a lot more examples of components that could be placed in a JFrame or JPanel. These components are sometimes called \cf3 widgets\cf0 .
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:58:49 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The first widget we'll see is one for displaying text inside the window. It's called a \cf3 JLabel\cf0 . If you've programmed in tkinter with Python, you've seen the term Label there too.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:59:02 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We'll make a JLabel instance variable that will be used to provide messages to the user (you don't have enough change; here's the soda you got; etc.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:59:11 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Can you give me the declaration for that instance variable? Let's call it status.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:59:30 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's mine:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:59:31 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
  private \cf5 JLabel\cf0  status\cf6 ;\cf0  
\f4\i \cf9 // for user messages
\f3\i0 \cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 7:59:38 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Don't forget to make instance variables private!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 7:59:41 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Look at the screenshot. Do you see any other JLabels in the upper part of the window?
\b0 \
\pard\pardeftab720
\cf4 eyl766\cf0  
\fs20 8:00:55 pm
\fs26 \
cents\
\cf4 MSTang\cf0  
\fs20 8:00:55 pm
\fs26 \
# of cents\
\cf4 MathWolf\cf0  
\fs20 8:00:55 pm
\fs26 \
THe money\
\cf4 chenjamin\cf0  
\fs20 8:00:55 pm
\fs26 \
there's a label that says Cents:\
\cf4 teachm\cf0  
\fs20 8:00:55 pm
\fs26 \
open for business and cents>\
\cf4 spower4\cf0  
\fs20 8:01:00 pm
\fs26 \
cents, cans left\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:01:02 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Yes, there's another label that tells you the total of the coins that have been entered. So add an instance variable for that called coinmesg.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:01:18 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Can you tell me the declaration for that? (Sorry I rushed the last one.)
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 8:01:54 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 private
\f2\b0  \cf5 JLabel\cf0  coinmesq\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 chenjamin\cf0  
\fs20 8:01:54 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 private
\f2\b0  \cf5 JLabel\cf0  coinmesg\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 Tungsten\cf0  
\fs20 8:01:54 pm
\fs26 \
private JLabel coinmesg;\
\cf4 connor0728\cf0  
\fs20 8:01:54 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 \'a0\
\'a0\'a0\'a0\'a0
\f3\b private
\f2\b0  \cf5 JLabel\cf0  coinmesg\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 piis3141592653\cf0  
\fs20 8:01:54 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0    
\f3\b private
\f2\b0  \cf5 JLabel\cf0  coinmesg\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 JesseLin\cf0  
\fs20 8:01:54 pm
\fs26 \
private JLabel coinmesg\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:01:59 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
  private \cf5 JLabel\cf0  coinmesg\cf6 ;\cf0  
\f4\i \cf9 // gives number of coins in machine
\f3\i0 \cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:02:10 pm
\fs26 \
\pard\pardeftab720

\b \cf0 There's one more instance variable our ChangeBin objects are going to need. Hint: It has nothing to do with GUIs.
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 8:03:11 pm
\fs26 \
The amount of money entered?\
\cf4 AkshajK\cf0  
\fs20 8:03:11 pm
\fs26 \
\pard\pardeftab720

\f1\fs24 \cf0 {{\NeXTGraphic 3cdf1c00eaefc64b9eaadfef3d394636c4fcf6f5.png \width2440 \height300 \noorient
}¬}\pard\pardeftab720

\f0\fs26 \cf0 \
\pard\pardeftab720
\cf4 AkshajK\cf0  
\fs20 8:03:11 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 private
\f2\b0  
\f3\b \cf12 int
\f2\b0 \cf0  cents\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 MSTang\cf0  
\fs20 8:03:11 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 private
\f2\b0  
\f3\b \cf12 int
\f2\b0 \cf0  cents\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 chenjamin\cf0  
\fs20 8:03:11 pm
\fs26 \
int for the number of cents\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:03:15 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We need to know the total in the machine. Note that is different from the label that displays the total. We can't increment a JLabel. We could extract the number from the text, but it's easier to keep the total as a separate variable.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:03:30 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Rather than store this total as dollars and cents, I'll just use cents. That means our variable can be of what type?
\b0 \
\pard\pardeftab720
\cf4 chenjamin\cf0  
\fs20 8:03:57 pm
\fs26 \
int\
\cf4 JRY\cf0  
\fs20 8:03:57 pm
\fs26 \
int\
\cf4 Tungsten\cf0  
\fs20 8:03:57 pm
\fs26 \
int\
\cf4 connor0728\cf0  
\fs20 8:03:57 pm
\fs26 \
int\
\cf4 spower4\cf0  
\fs20 8:03:57 pm
\fs26 \
int\
\cf4 MSTang\cf0  
\fs20 8:03:57 pm
\fs26 \
int\
\cf4 ScottBusche\cf0  
\fs20 8:03:57 pm
\fs26 \
int\
\cf4 eyl766\cf0  
\fs20 8:03:57 pm
\fs26 \
int\
\cf4 dlennon\cf0  
\fs20 8:04:03 pm
\fs26 \
int\
\cf4 manbugbeebee\cf0  
\fs20 8:04:05 pm
\fs26 \
int\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:04:07 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It can be an int. So our last instance variable will be:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:04:09 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
  private \cf12 int\cf0  total\cf6 ;\cf0  
\f4\i \cf9 // total amount in machine
\f3\i0 \cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:04:11 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Where do we assign values to instance variables?
\b0 \
\pard\pardeftab720
\cf4 MSTang\cf0  
\fs20 8:04:36 pm
\fs26 \
constructor\
\cf4 eyl766\cf0  
\fs20 8:04:36 pm
\fs26 \
constructor\
\cf4 connor0728\cf0  
\fs20 8:04:36 pm
\fs26 \
In the constructor\
\cf4 k77frank\cf0  
\fs20 8:04:36 pm
\fs26 \
constructor\
\cf4 AkshajK\cf0  
\fs20 8:04:36 pm
\fs26 \
CONSTRUCTOR\
\cf4 Tungsten\cf0  
\fs20 8:04:36 pm
\fs26 \
Constructors!\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:04:45 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Typically that's in a constructor. Go ahead and make the header for a default constructor for this class.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:05:14 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What will that look like?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:06:06 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Remember, a \cf3 default\cf0  constructor doesn't take any parameters (input variables).
\b0 \
\pard\pardeftab720
\cf4 connor0728\cf0  
\fs20 8:06:24 pm
\fs26 \
public ChangeBin()\{\
\cf4 eyl766\cf0  
\fs20 8:06:24 pm
\fs26 \
public ChangeBin()\
\cf4 Tungsten\cf0  
\fs20 8:06:24 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 public
\f2\b0  ChangeBin\cf7 ()\cf0  \cf7 \{\cf0 \
\pard\pardeftab720

\f0 \cf4 moppr\cf0  
\fs20 8:06:24 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 public
\f2\b0  ChangeBin\cf7 ()\{\cf0 \
\pard\pardeftab720

\f0 \cf4 connor0728\cf0  
\fs20 8:06:24 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 public
\f2\b0  ChangeBin\cf7 ()\{\cf0 \
\'a0\
\'a0\'a0\'a0\'a0\cf7 \}\cf0 \
\pard\pardeftab720

\f0 \cf4 chenjamin\cf0  
\fs20 8:06:24 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 public
\f2\b0  ChangeBin\cf7 ()\cf0  \cf7 \{\cf0 \
\pard\pardeftab720

\f0 \cf4 JRY\cf0  
\fs20 8:06:24 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 public
\f2\b0  ChangeBin\cf7 ()\cf0 \
\pard\pardeftab720

\f0 \cf4 MathWolf\cf0  
\fs20 8:06:24 pm
\fs26 \
public ChangeBin()\
\cf4 ScottBusche\cf0  
\fs20 8:06:30 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 \'a0\'a0\'a0\'a0 
\f3\b public
\f2\b0  ChangeBin\cf7 ()\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:06:33 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's what it looks like:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:06:34 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
  public ChangeBin\cf7 ()\cf0  \cf7 \{\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:06:36 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We'll initialize total first. That's the easy one. Can you do it?
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 8:08:27 pm
\fs26 \
What about the call to super()?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:09:12 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Good point. Remember if we don't call super explicitly, Java will quietly call super() first for us.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:09:32 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We'll initialize total first. That's the easy one. Can you do it?
\b0 \
\pard\pardeftab720
\cf4 chenjamin\cf0  
\fs20 8:09:46 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 this
\f2\b0 .\cf10 total\cf0  \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 JRY\cf0  
\fs20 8:09:46 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 MSTang\cf0  
\fs20 8:09:46 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 moppr\cf0  
\fs20 8:09:46 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 chutney\cf0  
\fs20 8:09:46 pm
\fs26 \
total=0;\
\cf4 piis3141592653\cf0  
\fs20 8:09:46 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 ScottBusche\cf0  
\fs20 8:09:46 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f3\b this
\f2\b0 .\cf10 total\cf6 =\cf11 0\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 chenjamin\cf0  
\fs20 8:09:46 pm
\fs26 \
this.total = 0;\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:09:52 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:09:55 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Now it gets more interesting. We need to make status a new JLabel. There are actually six different constructors one could use. You'll see examples of three in this program.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:10:26 pm
\fs26 \
\pard\pardeftab720

\b \cf0 For status, we'll use the one that takes a String as a parameter. The String, as you may expect, is the text you want to display. We'll just use a welcome sort of message here. Can you figure out what to do?
\b0 \
\pard\pardeftab720
\cf4 ReciterOfPi\cf0  
\fs20 8:11:35 pm
\fs26 \
Why are you posting everything in the sticky section?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:12:23 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Yeah. I'm trying to help people keep track of what's most important currently. But currently we have a lot of balls in the air, so I'm not sure which stuff will be most helpful to keep people on track with where we are in the logic of the code so far.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:12:36 pm
\fs26 \
\pard\pardeftab720

\b \cf0 For status, we'll use the one that takes a String as a parameter. The String, as you may expect, is the text you want to display. We'll just use a welcome sort of message here. Can you figure out what to do?
\b0 \
\pard\pardeftab720
\cf4 chenjamin\cf0  
\fs20 8:13:04 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 this
\f2\b0 .\cf10 status\cf0  \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JLabel\cf7 (\cf8 "Welcome"\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 Tungsten\cf0  
\fs20 8:13:04 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 this
\f2\b0 .\cf10 status\cf0  \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JLabel\cf7 (\cf8 "Welcome!"\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 moppr\cf0  
\fs20 8:13:04 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 status \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JLabel\cf7 (\cf8 "Welcome"\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 MathWolf\cf0  
\fs20 8:13:04 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 status \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JLabel\cf7 (\cf8 "Welcome to the vending machine"\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 JRY\cf0  
\fs20 8:13:04 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 status \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JLabel\cf7 (\cf8 "Welcome! Please insert 60 cents"\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:13:07 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's what I've got:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:13:08 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0status \cf6 =\cf0  new \cf5 JLabel\cf7 (\cf8 "Open for business"\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // initial text on labels
\f3\i0 \cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:13:20 pm
\fs26 \
\pard\pardeftab720

\b \cf0 This label will be the left one in the window at the top.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:13:29 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Next we'll put in the label for the number of coins. Notice in the screenshot, the total appears all the way to the right side. The default is that the text appears as far left as possible in the area allocated with it.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:14:03 pm
\fs26 \
\pard\pardeftab720

\b \cf0 To change it, we use a different version of the constructor. This one takes two parameters \'96 the text, and a constant saying how to align the text horizontally in the label area. Options for this are constants defined in JLabel: LEFT, CENTER, or RIGHT. There's also LEADING and TRAILING. In English, LEADING is LEFT, and TRAILING is RIGHT. For a language like Hebrew, it would be the opposite.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:14:22 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So here's how we can set the label:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:14:24 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0coinmesg \cf6 =\cf0  new \cf5 JLabel\cf7 (\cf8 "Cents: "\cf6 +\cf0 total, \cf5 JLabel\cf0 .\cf10 RIGHT\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // right justified
\f3\i0 \cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:14:42 pm
\fs26 \
\pard\pardeftab720

\b \cf0 I could have used "Cents: 0" for the text directly, but I'm mimicking what I'm going to need to later when the total changes. Note we write JLabel.RIGHT to get the constant.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:15:11 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So far so good?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:15:24 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Everybody with me?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:15:55 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Now that we've got the labels, we need to do something with them. What do we need to do?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:16:46 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Right now, it's like we've made our labels in our workshop, but we haven't actually fastened them to our window yet.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:17:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 This isn't a matter of visible/not visible.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:17:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 They're literally SOMEWHERE ELSE right now. They're not part of the window yet.
\b0 \
\pard\pardeftab720
\cf4 chenjamin\cf0  
\fs20 8:17:38 pm
\fs26 \
add them to a panel\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:18:50 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (Sorry, I should have said "They're not part of the panel yet." Adding the ChangeBin panel to our Machine (extends JFrame) window is yet another thing we'll have to do later.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:18:56 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We somehow need to get them into our ChangeBin JPanel. But first, we need to tell the panel how to put stuff in it.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:19:07 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's how we do that: Each JPanel has a LayoutManager associated with it. It decides where a component should go when it is added to the panel.
\b0 \
\pard\pardeftab720
\cf4 EmeraldBot\cf0  
\fs20 8:19:13 pm
\fs26 \
Where are they if they are not in the window?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:19:37 pm
\fs26 \
\pard\pardeftab720

\b \cf0 They're currently just some abstract data knocking around somewhere inside the class.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:19:43 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The simplest LayoutManager is called FlowLayout. When components are added, this manager basically sticks the component in the next available space based on the window size and the component's size. It tries to put as much on a line as it can. If a widget can't fit on a line, it goes to the next line.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:20:19 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It's easy to use, but it doesn't give you much control. Instead, we'll use a GridLayout. This sets up an invisible grid on top of the panel. Now, as we add widgets, they are slotted in the next space. So we have better control of how things are arranged.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:20:59 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's how we create our LayoutManager. We use the JPanel method setLayout:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:21:01 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0setLayout\cf7 (\cf0 new \cf5 GridLayout\cf7 (\cf11 1\cf0 , \cf11 2\cf7 ))\cf6 ;\cf0  
\f4\i \cf9 // place widgets into two columns
\f3\i0 \cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:21:12 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Remember we inherit setLayout from JPanel. Well, actually we inherit setLayout from a superclass of JPanel called Container. A Container is something that contains one or more components.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:21:33 pm
\fs26 \
\pard\pardeftab720

\b \cf0 You may wonder why this isn't called JContainer. In fact, if you look closely at the API, there are other J-less classes for Panel, Frame, and Label. These latter classes are part of the Abstract Window Toolkit (AWT). The GUIs developed in AWT look different depending on which Java platform you develop in (Mac, Windows, Linux, etc.). AWT's components are called \cf3 heavyweight\cf0  components, since they mimic the local system. On a Mac, a Button looks like a button in a Mac application. In Windows, it looks like one in a Windows application.
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 8:22:44 pm
\fs26 \
Where should I put the call to setLayout()?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:23:03 pm
\fs26 \
\pard\pardeftab720

\b \cf0 In the ChangeBin default constructor we're writing.
\b0 \
\pard\pardeftab720
\cf4 chenjamin\cf0  
\fs20 8:23:06 pm
\fs26 \
it says that GridLayout cannot be resolved to a type\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:23:21 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Hang on. I'll get to that.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:23:44 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Back to what I was saying: We've been using components from the more recently developed Swing package. These are \cf3 lightweight\cf0  components that look the same no matter what system you run the code. And while this is beyond the scope of our course, you can set how you want Swing components to look (Google "pluggable look and feel" to learn more). Since Swing gives us more control over what our programs look like, using it is preferable to using AWT classes.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:24:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 As you can see, we can't ignore AWT altogether. Some Swing components inherit from AWT, since it's better to keep common code in superclasses high up in the hierarchy.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:24:24 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Can you think of another class that also inherits from Container?
\b0 \
\pard\pardeftab720
\cf4 puwei99\cf0  
\fs20 8:24:50 pm
\fs26 \
JFrame\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:24:52 pm
\fs26 \
\pard\pardeftab720

\b \cf0 A JFrame is also a kind of Container. So we'll eventually set the layout for our frame too.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:25:01 pm
\fs26 \
\pard\pardeftab720

\b \cf0 GridLayout is also a class in AWT. The look and feel don't impact on how things are arranged, so Swing just uses what's in AWT already. To use it, we'll need to import it from the java.awt package. You may as well import java.awt.*; at the top.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:25:54 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (That's why java.awt.* was in the previous code where I made a "mistake" earlier as well. I had not included all the imports. The import section must have been collapsed down when I copied that chunk of code into my lesson plan.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:26:07 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The parameters to the constructor give the number of rows and columns. We want the labels on the same line, so we use 1 row.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:26:23 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Let's first finish up ChangeBin's layout for the labels.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:26:26 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We can now add the two labels to the JPanel using the add method. Which comes first?
\b0 \
\pard\pardeftab720
\cf4 MSTang\cf0  
\fs20 8:27:04 pm
\fs26 \
status\
\cf4 chenjamin\cf0  
\fs20 8:27:04 pm
\fs26 \
status\
\cf4 connor0728\cf0  
\fs20 8:27:04 pm
\fs26 \
status\
\cf4 Tungsten\cf0  
\fs20 8:27:04 pm
\fs26 \
status\
\cf4 JRY\cf0  
\fs20 8:27:04 pm
\fs26 \
status, since we want it to the left\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:27:10 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Since the status text is on the left, we want to add that first. So what's the code?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:27:26 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (Give me the code for adding both labels.)
\b0 \
\pard\pardeftab720
\cf4 chenjamin\cf0  
\fs20 8:28:43 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 add\cf7 (
\f3\b \cf0 this
\f2\b0 .\cf10 status\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0add\cf7 (
\f3\b \cf0 this
\f2\b0 .\cf10 coinmesg\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 Tungsten\cf0  
\fs20 8:28:43 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f3\b this
\f2\b0 .\cf10 add\cf7 (
\f3\b \cf0 this
\f2\b0 .\cf10 status\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f3\b this
\f2\b0 .\cf10 add\cf7 (
\f3\b \cf0 this
\f2\b0 .\cf10 coinmesg\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:28:49 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's my answer:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:28:51 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0add\cf7 (\cf0 status\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // put everything in panel
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 coinmesg\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:29:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Ok. We're done with our ChangeBin default constructor for now.
\b0 \
\pard\pardeftab720
\cf4 puwei99\cf0  
\fs20 8:29:22 pm
\fs26 \
how do you specify where to put status and coinmesg\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:30:03 pm
\fs26 \
\pard\pardeftab720

\b \cf0 This code is in the ChangeBin (extends JPanel) constructor. add means this.add means add these JLabels to the ChangeBin being constructed.
\b0 \
\pard\pardeftab720
\cf4 MSTang\cf0  
\fs20 8:30:14 pm
\fs26 \
Wait, shouldn't we put /super/ before the call to the /add()/ method?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:30:52 pm
\fs26 \
\pard\pardeftab720

\b \cf0 As I reminded us of about twenty minutes ago, if we don't explicitly call some form of super, Java will implicitly call the default super() for us.
\b0 \
\pard\pardeftab720
\cf4 k77frank\cf0  
\fs20 8:30:58 pm
\fs26 \
can you post whole code?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:31:09 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The whole code for ChangeBin should currently be in the sticky box.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:31:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (Except for imports, but Eclipse will tell you what's missing there: javax.swing.* and java.awt.*)
\b0 \
\pard\pardeftab720
\cf4 moppr\cf0  
\fs20 8:31:45 pm
\fs26 \
It says setLayout is undefined?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:31:52 pm
\fs26 \
\pard\pardeftab720

\b \cf0 You need to import java.awt.*
\b0 \
\pard\pardeftab720
\cf4 EmeraldBot\cf0  
\fs20 8:33:16 pm
\fs26 \
I've imported java.awt.*, and mine says it is undefined for type ChangeBin.\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:33:44 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's a version that should be close to what we're up to right now.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:33:52 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Maybe this can fix your problem.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:34:11 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
public class ChangeBin extends \cf5 JPanel\cf7 \{\cf0 \
  private \cf5 JLabel\cf0  coinmesg\cf6 ;\cf0  
\f4\i \cf9 // gives number of coins in machine
\f3\i0 \cf0 \
  private \cf5 JLabel\cf0  status\cf6 ;\cf0  
\f4\i \cf9 // for user messages
\f3\i0 \cf0 \
  private \cf12 int\cf0  total\cf6 ;\cf0  
\f4\i \cf9 // total amount in machine
\f3\i0 \cf0 \
  public ChangeBin\cf7 ()\cf0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0status \cf6 =\cf0  new \cf5 JLabel\cf7 (\cf8 "Open for business"\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // initial text on labels
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0coinmesg \cf6 =\cf0  new \cf5 JLabel\cf7 (\cf8 "Cents: "\cf6 +\cf0 total, \cf5 JLabel\cf0 .\cf10 RIGHT\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // right justified
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0setLayout\cf7 (\cf0 new \cf5 GridLayout\cf7 (\cf11 1\cf0 , \cf11 2\cf7 ))\cf6 ;\cf0  
\f4\i \cf9 // place widgets into two columns
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 status\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // put everything in panel
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 coinmesg\cf7 )\cf6 ;\cf0 \
  \cf7 \}\cf0 \
\pard\pardeftab720
\cf7 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:35:15 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Everything good for folks in ChangeBin now?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:35:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Now let's jump back to Machine to add in the code we need in main. There are three lines to add. Can you tell me what they are?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:36:09 pm
\fs26 \
\pard\pardeftab720

\b \cf0 In other words, what do we need to do to get our ChangeBin section into our Machine window now?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:37:03 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Before we can use a ChangeBin object, what do we need to do?
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 8:37:18 pm
\fs26 \
Create it!\
\cf4 spower4\cf0  
\fs20 8:37:26 pm
\fs26 \
create the object\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:37:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Yes indeed!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:37:52 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It's just like that Carl Sagan quotation "If you want to make an apple pie from scratch, you must first create the universe." 
\f1\b0\fs24 {{\NeXTGraphic 1__#$!@%!#__tongue.gif \width320 \height320 \noorient
}¬}
\f0\fs26 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:37:56 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We need to create a ChangeBin object:
\b0 \
\pard\pardeftab720
\cf4 ScottBusche\cf0  
\fs20 8:38:04 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0ChangeBin c \cf6 =\cf0  
\f3\b new
\f2\b0  ChangeBin\cf7 ()\cf6 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:38:08 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0ChangeBin bin \cf6 =\cf0  new ChangeBin\cf7 ()\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:38:32 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We need to set the layout of the frame, so we can put stuff in it. Notice that setLayout is \cf3 not\cf0  a method of Machine; we need to make sure we call setLayout on the appropriate object:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:38:33 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0outputFrame.\cf10 setLayout\cf7 (\cf0 new \cf5 GridLayout\cf7 (\cf11 4\cf0 ,\cf11 1\cf7 ))\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:38:59 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Why did I make my grid be 4 by 1? Because eventually we'll have the ChangeBin and three Soda panels. So that's 4 rows in 1 column.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:39:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Another possibility is to use 0 for the rows, not 4. By putting 0, it will make as many rows as needed to hold all the added objects. I won't need to change it later if I decide I want more types of soda.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:39:21 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The final thing to do is add the ChangeBin object to the frame:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:39:26 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What will that look like?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:40:18 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (Note: You'll need to import java.awt.* to get support for setLayout, just like we did in ChangeBin.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:41:15 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So far I have to answers on how to add the ChangeBin to our Machine window that I chose to call outputFrame. Anyone else?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:41:33 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It's similar to the most recent line we wrote...
\b0 \
\pard\pardeftab720
\cf4 JRY\cf0  
\fs20 8:41:59 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 outputFrame.\cf10 add\cf7 (\cf0 bin\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 Tungsten\cf0  
\fs20 8:41:59 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 window.\cf10 add\cf7 (\cf0 cb\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 ScottBusche\cf0  
\fs20 8:41:59 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0outputFrame.\cf10 add\cf7 (\cf0 bin\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 chenjamin\cf0  
\fs20 8:41:59 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 ChangeBin bin \cf6 =\cf0  
\f3\b new
\f2\b0  ChangeBin\cf7 ()\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0window.\cf10 setLayout\cf7 (
\f3\b \cf0 new
\f2\b0  \cf5 GridLayout\cf7 (\cf11 4\cf0 ,\cf11 1\cf7 ))\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0window.\cf10 add\cf7 (\cf0 bin\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:42:08 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Yeah. Here's what I have:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:42:11 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0outputFrame.\cf10 add\cf7 (\cf0 bin\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:42:34 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Okay, so now let's look at what we have. (I'll include the ChangeBin code too so it's easier to find in the transcript.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:42:36 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So here's what ChangeBin should look like:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:42:37 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
public class ChangeBin extends \cf5 JPanel\cf7 \{\cf0 \
  private \cf5 JLabel\cf0  coinmesg\cf6 ;\cf0  
\f4\i \cf9 // gives number of coins in machine
\f3\i0 \cf0 \
  private \cf5 JLabel\cf0  status\cf6 ;\cf0  
\f4\i \cf9 // for user messages
\f3\i0 \cf0 \
  private \cf12 int\cf0  total\cf6 ;\cf0  
\f4\i \cf9 // total amount in machine
\f3\i0 \cf0 \
  public ChangeBin\cf7 ()\cf0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0status \cf6 =\cf0  new \cf5 JLabel\cf7 (\cf8 "Open for business"\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // initial text on labels
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0coinmesg \cf6 =\cf0  new \cf5 JLabel\cf7 (\cf8 "Cents: "\cf6 +\cf0 total, \cf5 JLabel\cf0 .\cf10 RIGHT\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // right justified
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0setLayout\cf7 (\cf0 new \cf5 GridLayout\cf7 (\cf11 1\cf0 , \cf11 2\cf7 ))\cf6 ;\cf0  
\f4\i \cf9 // place widgets into two columns
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 status\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // put everything in panel
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 coinmesg\cf7 )\cf6 ;\cf0 \
  \cf7 \}\cf0 \
\pard\pardeftab720
\cf7 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:42:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 And here's Machine:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:42:41 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
public class Machine \cf7 \{\cf0 \
  public static \cf12 void\cf0  main\cf7 (\cf5 String\cf7 []\cf0  args\cf7 )\cf0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0
\f4\i \cf9 // create a frame object
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0\cf5 JFrame\cf0  outputFrame \cf6 =\cf0  new \cf5 JFrame\cf7 (\cf8 "Vending Machine"\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // the window
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0ChangeBin bin \cf6 =\cf0  new ChangeBin\cf7 ()\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0
\f4\i \cf9 // step 2: instantiate frame and specify properties
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0 
\f4\i \cf9 // specify action to take on a close
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0outputFrame.\cf10 setDefaultCloseOperation\cf7 (\cf5 JFrame\cf0 .\cf10 EXIT_ON_CLOSE\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0
\f4\i \cf9 // specify size of window
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0outputFrame.\cf10 setSize\cf7 (\cf11 500\cf0 , \cf11 450\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0
\f4\i \cf9 // specify layout manager
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0
\f4\i \cf9 // figures out where to put the content we place in the pane
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0outputFrame.\cf10 setLayout\cf7 (\cf0 new \cf5 GridLayout\cf7 (\cf11 4\cf0 ,\cf11 1\cf7 ))\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0outputFrame.\cf10 add\cf7 (\cf0 bin\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0
\f4\i \cf9 // make window visible
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0outputFrame.\cf10 setVisible\cf7 (\cf12 true\cf7 )\cf6 ;\cf0 \
  \cf7 \}\cf0 \
\pard\pardeftab720
\cf7 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:42:54 pm
\fs26 \
\pard\pardeftab720

\b \cf0 If you run it at this point, you should see the text at the top of the window with the coins to the right:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:42:58 pm
\fs26 \
\pard\pardeftab720

\b \cf0 \
\pard\pardeftab720

\f1\b0\fs24 \cf0 {{\NeXTGraphic vending2.png \width9600 \height5400 \noorient
}¬}\pard\pardeftab720

\f0\fs26 \cf0 \
\pard\pardeftab720
\cf4 MSTang\cf0  
\fs20 8:43:22 pm
\fs26 \
The text's not completely at the top...\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:43:35 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The vertical default is to have the text in the center of the area for the label. If you want the text entirely at the top of the area, we can use a different method:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:43:36 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0status.\cf10 setVerticalAlignment\cf7 (\cf5 SwingConstants\cf0 .\cf10 TOP\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:43:51 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Notice this is called on the JLabel object. If you get a red line under SwingConstants, make sure you imported javax.swing.* at the top. TOP, CENTER, and BOTTOM are the constants that will work in this method.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:44:08 pm
\fs26 \
\pard\pardeftab720

\b \cf0 If you like, you can do the same with the other JLabel.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:44:36 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Questions before we continue on to making the buttons?
\b0 \
\pard\pardeftab720
\cf4 k77frank\cf0  
\fs20 8:45:08 pm
\fs26 \
Does order matter when you are typing the constructor?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:45:27 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Sometimes it does. Sometimes it doesn't. It matters in the way it matters anywhere else you're writing code.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:45:52 pm
\fs26 \
\pard\pardeftab720

\b \cf0 I'll pass that discussion to an assistant if you'd like a more detailed answer.
\b0 \
\pard\pardeftab720
\cf4 piis3141592653\cf0  
\fs20 8:46:05 pm
\fs26 \
where do I put the status.setVerticalAlignment(SwingConstants.TOP);?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:47:02 pm
\fs26 \
\pard\pardeftab720

\b \cf0 In the ChangeBin constructor. One hint that that'd be the place to do it right now is that that's the only place where we can meaningfully talk about our status and coinmesg JLabels.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:47:25 pm
\fs26 \
\pard\pardeftab720

\b \cf3 PART 3: MAKING CHANGE II: BUTTONS
\b0 \cf0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:47:26 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Next we'll add in the mechanism for putting change into our virtual machine. We could have the user enter the number of coins they want to put in. What disadvantages might that approach have?
\b0 \
\pard\pardeftab720
\cf4 ReciterOfPi\cf0  
\fs20 8:48:08 pm
\fs26 \
They could enter a negative number?\
\cf4 chenjamin\cf0  
\fs20 8:48:08 pm
\fs26 \
they could get a typo\
\cf4 JRY\cf0  
\fs20 8:48:08 pm
\fs26 \
They might not enter an integer in the appropriate range\
\cf4 williamyin08\cf0  
\fs20 8:48:08 pm
\fs26 \
coin spam\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:48:10 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The biggest issue is that we'd have to be a lot more careful about errors. If the user entered something we weren't expecting, our program could crash. We could use the techniques of exception handling we discussed last week to deal with this.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:48:52 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Also clicking the buttons feels (to me) closer to the real-life experience of adding coins in one at a time. And buttons are a common way to interact with a GUI, so I want to make sure we talk about them!
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:49:01 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So let's get to it. What do you think is the class that we will use to represent a button in the program?
\b0 \
\pard\pardeftab720
\cf4 ScottBusche\cf0  
\fs20 8:49:30 pm
\fs26 \
JButton?\
\cf4 Tungsten\cf0  
\fs20 8:49:30 pm
\fs26 \
JButton?\
\cf4 ReciterOfPi\cf0  
\fs20 8:49:30 pm
\fs26 \
JButton?\
\cf4 MSTang\cf0  
\fs20 8:49:30 pm
\fs26 \
JButton!\
\cf4 MathWolf\cf0  
\fs20 8:49:30 pm
\fs26 \
JButton\
\cf4 chenjamin\cf0  
\fs20 8:49:36 pm
\fs26 \
JButton\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:49:38 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Just like JLabel, JFrame, and JPanel, we have JButton.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:49:43 pm
\fs26 \
\pard\pardeftab720

\b \cf0 OK, let's make a JButton object. If you look at the screenshot, we'll really need four: one for each of the three coins (nickels, dimes, quarters; no pennies) and one for "reset".
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:49:53 pm
\fs26 \
\pard\pardeftab720

\b \cf0 As usual, we need to declare JButton variables and then instantiate objects. In this case, we'll make the variables local to the constructor.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:50:16 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Why do it this way? Or maybe a better question \'96 why did we make our JLabels and int instance variables?
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 8:51:15 pm
\fs26 \
Because they might need to change?\
\cf4 MSTang\cf0  
\fs20 8:51:15 pm
\fs26 \
To change them later, if we need\
\cf4 chenjamin\cf0  
\fs20 8:51:15 pm
\fs26 \
because they need to be changed by later methods; the buttons don't need changing\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:51:17 pm
\fs26 \
\pard\pardeftab720

\b \cf0 As we use the program, the total number of coins will change. Also the text on the labels will change too. So other parts of the program will need to use or alter whatever is in those variables. Hence we need to keep them around for later access.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:51:27 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The buttons are different. Once we set them up, we don't need to alter the buttons. If, for example, we were going to change the text of a button based on what was in the machine, we would want the button object to be stored in an instance variable. One of your homework problems will have you make a change like this.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:51:44 pm
\fs26 \
\pard\pardeftab720

\b \cf0 I called the button variables in my code nickelB, dimeB, quarterB, and backB. Can you give me the line to declare them?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:53:49 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (By the way, when I said the buttons will be local to "the constructor" I mean the ChangeBin constructor, in case that wasn't clear. These declarations need to go in the ChangeBin constructor.)
\b0 \
\pard\pardeftab720
\cf4 moppr\cf0  
\fs20 8:54:09 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 \'a0\'a0\'a0\'a0  
\f3\b private
\f2\b0  \cf5 JButton\cf0  nickelB, dimeB, quarterB, backB\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 chenjamin\cf0  
\fs20 8:54:09 pm
\fs26 \
\pard\pardeftab720

\f2 \cf5 JButton\cf0  nickelB, dimeB, quarterB, backB\cf6 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:54:44 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's what I've got:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:54:45 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0\cf5 JButton\cf0  nickelB, dimeB, quarterB, backB\cf6 ;\cf0  
\f4\i \cf9 // buttons
\f3\i0 \cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:55:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Now to instantiate them. JButtons, like JLabels, can be constructed in multiple ways. Here we pass the text to appear on the button as a parameter. So, given the screenshot, can you instantiate our four buttons?
\b0 \
\pard\pardeftab720
\cf4 MathWolf\cf0  
\fs20 8:56:19 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 nickelB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Add a nickel"\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 bluebandit21\cf0  
\fs20 8:56:19 pm
\fs26 \
nickelB=JButton("Add a nickle.");\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:56:32 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Yep, that's how we'd do our nickel Button. And the others?
\b0 \
\pard\pardeftab720
\cf4 JRY\cf0  
\fs20 8:57:21 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 nickelB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Add a nickel"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0dimeB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Add a dime"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0quarterB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Add a quarter"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0backB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Get change back"\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 chenjamin\cf0  
\fs20 8:57:21 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 nickelB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Add a nickel"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0dimeB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Add a dime"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0quarterB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Add a quarter"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0backB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Get change back"\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 MathWolf\cf0  
\fs20 8:57:21 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 nickelB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Add a nickel"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0dimeB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Add a dime"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0quarterB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Add a quarter"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0backB \cf6 =\cf0  
\f3\b new
\f2\b0  \cf5 JButton\cf7 (\cf8 "Get change back"\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:57:29 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's my answer:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:57:31 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0nickelB \cf6 =\cf0  new \cf5 JButton\cf7 (\cf8 "Add a nickel"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0dimeB \cf6 =\cf0  new \cf5 JButton\cf7 (\cf8 "Add a dime"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0quarterB \cf6 =\cf0  new \cf5 JButton\cf7 (\cf8 "Add a quarter"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0backB \cf6 =\cf0  new \cf5 JButton\cf7 (\cf8 "Get change back"\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:57:39 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Now what do we have to do?
\b0 \
\pard\pardeftab720
\cf4 ScottBusche\cf0  
\fs20 8:58:01 pm
\fs26 \
Add them!\
\cf4 MSTang\cf0  
\fs20 8:58:01 pm
\fs26 \
Add to the panel\
\cf4 chenjamin\cf0  
\fs20 8:58:01 pm
\fs26 \
add them to the JPanel\
\cf4 Tungsten\cf0  
\fs20 8:58:01 pm
\fs26 \
Add them to the ChangeBin!\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:58:05 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The buttons need to go into our ChangeBin JPanel. Can you tell me how?
\b0 \
\pard\pardeftab720
\cf4 puwei99\cf0  
\fs20 8:58:36 pm
\fs26 \
add(nickelB); and so on\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:58:37 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We need a bunch of adds:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:58:38 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0add\cf7 (\cf0 nickelB\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 dimeB\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 quarterB\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 backB\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 8:58:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 If you run the code right now, the buttons will show up, but things will look a little cramped. Why?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:59:01 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What's wrong with our 
\i layout
\i0 ?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:59:07 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Hint hint...
\b0 \
\pard\pardeftab720
\cf4 moppr\cf0  
\fs20 8:59:45 pm
\fs26 \
they're all on top\
\cf4 teachm\cf0  
\fs20 8:59:45 pm
\fs26 \
They need a new row\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:59:48 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Our LayoutManager is set as a 1x2 grid. Since we've gone over that, the program is squeezing the buttons in wherever it can.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 8:59:52 pm
\fs26 \
\pard\pardeftab720

\b \cf0 How do we fix it?
\b0 \
\pard\pardeftab720
\cf4 chenjamin\cf0  
\fs20 9:00:12 pm
\fs26 \
make a new row\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:00:52 pm
\fs26 \
\pard\pardeftab720

\b \cf0 If we examine our screenshot, it seems it will make sense to make 3 rows. The first is that action with the labels. The other 2 rows will be the buttons.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:00:55 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Simply change the parameters to new GridLayout to make a larger grid. Counting labels and buttons, we need a 3 by 2 grid:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:00:56 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0setLayout\cf7 (\cf0 new \cf5 GridLayout\cf7 (\cf11 3\cf0 , \cf11 2\cf7 ))\cf6 ;\cf0  
\f4\i \cf9 // place widgets into two columns
\f3\i0 \cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:01:04 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's the latest version of the constructor for ChangeBin:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:01:05 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
  public ChangeBin\cf7 ()\cf0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0\cf5 JButton\cf0  nickelB, dimeB, quarterB, backB\cf6 ;\cf0  
\f4\i \cf9 // buttons
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0status \cf6 =\cf0  new \cf5 JLabel\cf7 (\cf8 "Open for business"\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // initial text on labels
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0coinmesg \cf6 =\cf0  new \cf5 JLabel\cf7 (\cf8 "Cents: "\cf6 +\cf0 total, \cf5 JLabel\cf0 .\cf10 RIGHT\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // right justified
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0status.\cf10 setVerticalAlignment\cf7 (\cf5 SwingConstants\cf0 .\cf10 TOP\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0coinmesg.\cf10 setVerticalAlignment\cf7 (\cf5 SwingConstants\cf0 .\cf10 TOP\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0nickelB \cf6 =\cf0  new \cf5 JButton\cf7 (\cf8 "Add a nickel"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0dimeB \cf6 =\cf0  new \cf5 JButton\cf7 (\cf8 "Add a dime"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0quarterB \cf6 =\cf0  new \cf5 JButton\cf7 (\cf8 "Add a quarter"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0backB \cf6 =\cf0  new \cf5 JButton\cf7 (\cf8 "Get change back"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0setLayout\cf7 (\cf0 new \cf5 GridLayout\cf7 (\cf11 3\cf0 , \cf11 2\cf7 ))\cf6 ;\cf0  
\f4\i \cf9 // place widgets into two columns
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 status\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // put everything in panel
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 coinmesg\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 nickelB\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 dimeB\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 quarterB\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 backB\cf7 )\cf6 ;\cf0 \
  \cf7 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:01:20 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Things should look nicer when you run the program now. Of course, there's still a big problem with it...
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:01:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Nothing happens when you click the buttons! This should not be surprising, since we haven't told the program what the buttons are for.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:02:18 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (I'm thinking we might not have enough time to get to putting in the soda graphics since this next part will probably take about 30 minutes. I'll try to get to the images if there's time, otherwise, I'll make a post about it on the message board.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:02:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Some of you may have written GUIs in other languages, and if so, you know that GUI applications work differently from the text-based programs we've developed. All of our programs have code that goes in sequence. Start in main, do this code, then do this code, maybe loop a few times, maybe jump to a particular method.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:03:05 pm
\fs26 \
\pard\pardeftab720

\b \cf0 But in a GUI program, the interaction with the user changes when things are done. Here, I've got four buttons. I can't predict which button the user is going to click. To make it worse, I can't even predict 
\i when
\i0  the user will click a button.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:03:20 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So I need to be able to set up my program and let it go. The program will need to recognize when something interesting happens, and it will need to act accordingly to respond to what happened.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:03:35 pm
\fs26 \
\pard\pardeftab720

\b \cf0 These "interesting things" are referred to as \cf3 events\cf0 , and this approach needed to write a GUI-based program is called \cf3 event-driven programming\cf0 .
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:03:43 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Java can recognize lots of different kinds of events. One such event is clicking a button. In that case, we say the button generates an event. We want Java to automatically call a particular method that will do what we want when the event occurs.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:04:09 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's how it's done: We make a class that has within it a method for Java to call when the event happens. We then associate an object of that class with whatever component should trigger the method.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:04:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 How can Java be sure the class we create has the method it's looking for? What mechanism can it use?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:05:07 pm
\fs26 \
\pard\pardeftab720

\b \cf0 What have we learned about recently that lets Java make sure some class we've written has certain methods implemented?
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 9:05:32 pm
\fs26 \
Interfaces?\
\cf4 JRY\cf0  
\fs20 9:05:32 pm
\fs26 \
an interface\
\cf4 MathWolf\cf0  
\fs20 9:05:32 pm
\fs26 \
interface\
\cf4 moppr\cf0  
\fs20 9:05:32 pm
\fs26 \
interfaces\
\cf4 PiCrazy31415\cf0  
\fs20 9:05:32 pm
\fs26 \
interface\
\cf4 k77frank\cf0  
\fs20 9:05:32 pm
\fs26 \
interfaces\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:05:35 pm
\fs26 \
\pard\pardeftab720

\b \cf0 This is a perfect example of a use of an interface (not the graphical kind). We implement the appropriate interface, supplying the method(s) the interface requires.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:06:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 For JButtons, we use the interface ActionListener. (This interface definition is already part of the Java libraries, so we don't have to write it for ourselves.) No J there; it's part of AWT, since this has nothing to do with look and feel. To be specific, it's part of the package java.awt.event. Even if you've already imported java.awt.*, you'll still need to import java.awt.event.*.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:06:35 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We'll define the class that implements this interface right inside the ChangeBin class. This makes sense, because the behavior it performs is directly related to the ChangeBin object. It wouldn't be needed by other classes. So, right after the close brace for the constructor, add the line:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:06:47 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
private class ButtonHandler implements \cf5 ActionListener\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:08:51 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Then start the class definition with an open curly brace.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:08:53 pm
\fs26 \
\pard\pardeftab720

\b \cf0 This class doesn't need any constructors or instance variables (although it could have them). The interface requires only one method with the following header:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:09:11 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf12 void\cf0  actionPerformed\cf7 (\cf5 ActionEvent\cf0  event\cf7 )\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:09:21 pm
\fs26 \
\pard\pardeftab720

\b \cf0 This is the method that will be called when the event occurs. The parameter is an object that represents the event.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:09:27 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Put in the curly braces \{\} for the body of the method, and then give a closed curly brace to end the class. We'll fill in the body in a minute, but first I want to associate the class with the buttons.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:09:46 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Go back to the constructor, and declare and instantiate an object of the class we just defined. Call the object bh (for ButtonHandler). What's the code?
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 9:11:23 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 ButtonHandler bh \cf6 =\cf0  
\f3\b new
\f2\b0  ButtonHandler\cf7 ()\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 teachm\cf0  
\fs20 9:11:23 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 ButtonHandler bh \cf6 =\cf0  
\f3\b new
\f2\b0  ButtonHandler\cf7 ()\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 spower4\cf0  
\fs20 9:11:23 pm
\fs26 \
ButtonHandler bh = new ButtonHandler();\
\cf4 chenjamin\cf0  
\fs20 9:11:23 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 ButtonHandler bh \cf6 =\cf0  
\f3\b new
\f2\b0  ButtonHandler\cf7 (\cf0 event\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 JRY\cf0  
\fs20 9:11:23 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 ButtonHandler bh \cf6 =\cf0  
\f3\b new
\f2\b0  ButtonHandler\cf7 ()\cf6 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:11:44 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0ButtonHandler bh\cf6 ;\cf0  
\f4\i \cf9 // for dealing with button clicks
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0   bh \cf6 =\cf0  new ButtonHandler\cf7 ()\cf6 ;\cf0  
\f4\i \cf9 // attach button handling code to buttons
\f3\i0 \cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:11:52 pm
\fs26 \
\pard\pardeftab720

\b \cf0 You could combine the lines into one (as everyone who answered noticed). And note we use the free default constructor.
\b0 \
\pard\pardeftab720
\cf4 williamyin08\cf0  
\fs20 9:12:00 pm
\fs26 \
Why do we still need to import java.awt.event.* when we already have java.awt.*?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:12:32 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Good question. In fact, even though the notation makes it seem as though java.awt.event.* is contained in java.awt.* IT ISN'T.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:13:09 pm
\fs26 \
\pard\pardeftab720

\b \cf0 They're separate packages.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:13:45 pm
\fs26 \
\pard\pardeftab720

\b \cf0 And it's like that for all the dot notation for packages in Java, so get used to that quirk.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:13:48 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Now we attach the ButtonHandler to the button. The method to do that is addActionListener:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:13:55 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0   nickelB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:14:15 pm
\fs26 \
\pard\pardeftab720

\b \cf0 At this point, we have a choice as to how we proceed. Since we have four buttons that do four different things, we could make a separate class for each one (NickelButtonHandler, DimeButtonHandler, etc.).
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:14:37 pm
\fs26 \
\pard\pardeftab720

\b \cf0 But, just to show you how it's done, I'll use the same ButtonHandler for all four buttons, and have the actionPerformed method decide which button caused the event.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:14:46 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So attach the bh object to the other three buttons. What's the code?
\b0 \
\pard\pardeftab720
\cf4 chenjamin\cf0  
\fs20 9:15:28 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 nickelB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0dimeB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0quarterB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0backB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 Tungsten\cf0  
\fs20 9:15:28 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0dimeB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0quarterB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0backB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 teachm\cf0  
\fs20 9:15:28 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 dimeB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 quarterB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 backB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 piis3141592653\cf0  
\fs20 9:15:28 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0  dimeB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0quarterB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0backB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 MathWolf\cf0  
\fs20 9:15:28 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 nickelB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0dimeB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0quarterB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0backB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 JRY\cf0  
\fs20 9:15:31 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 dimeB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0quarterB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0backB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:15:33 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's what it should look like:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:15:34 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0dimeB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0quarterB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0backB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:15:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 And here's the final version of the ChangeBin constructor:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:15:41 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
  public ChangeBin\cf7 ()\cf0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0\cf5 JButton\cf0  nickelB, dimeB, quarterB, backB\cf6 ;\cf0  
\f4\i \cf9 // buttons
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0ButtonHandler bh\cf6 ;\cf0  
\f4\i \cf9 // for dealing with button clicks
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0status \cf6 =\cf0  new \cf5 JLabel\cf7 (\cf8 "Open for business"\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // initial text on labels
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0coinmesg \cf6 =\cf0  new \cf5 JLabel\cf7 (\cf8 "Cents: "\cf6 +\cf0 total, \cf5 JLabel\cf0 .\cf10 RIGHT\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // right justified
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0status.\cf10 setVerticalAlignment\cf7 (\cf5 SwingConstants\cf0 .\cf10 TOP\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0coinmesg.\cf10 setVerticalAlignment\cf7 (\cf5 SwingConstants\cf0 .\cf10 TOP\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0nickelB \cf6 =\cf0  new \cf5 JButton\cf7 (\cf8 "Add a nickel"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0dimeB \cf6 =\cf0  new \cf5 JButton\cf7 (\cf8 "Add a dime"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0quarterB \cf6 =\cf0  new \cf5 JButton\cf7 (\cf8 "Add a quarter"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0backB \cf6 =\cf0  new \cf5 JButton\cf7 (\cf8 "Get change back"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0setLayout\cf7 (\cf0 new \cf5 GridLayout\cf7 (\cf11 3\cf0 , \cf11 2\cf7 ))\cf6 ;\cf0  
\f4\i \cf9 // place widgets into two columns
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 status\cf7 )\cf6 ;\cf0  
\f4\i \cf9 // put everything in panel
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 coinmesg\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 nickelB\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 dimeB\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 quarterB\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0add\cf7 (\cf0 backB\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0bh \cf6 =\cf0  new ButtonHandler\cf7 ()\cf6 ;\cf0  
\f4\i \cf9 // attach button handling code to buttons
\f3\i0 \cf0 \
\'a0\'a0\'a0\'a0nickelB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0dimeB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0quarterB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0backB.\cf10 addActionListener\cf7 (\cf0 bh\cf7 )\cf6 ;\cf0 \
  \cf7 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:16:01 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Now to fill in the actionPerformed method. First, since we're only using one handler, we have to decide which button caused the event. The key to that is the parameter to actionPerformed.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:16:51 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The ActionEvent class has a method called getActionCommand. It returns a String associated with the event. What String do you think that is for a button click event?
\b0 \
\pard\pardeftab720
\cf4 bluebandit21\cf0  
\fs20 9:17:49 pm
\fs26 \
the name of the button?\
\cf4 MSTang\cf0  
\fs20 9:17:49 pm
\fs26 \
The text of the button\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:17:54 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It's the text on the button. This is pretty cool, since you can have a button do different things at different times by changing the text (which is done via the setText method, unsurprisingly).
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:18:02 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So the first thing we do in actionPerformed is call the getActionCommand method:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:18:04 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf12 void\cf0  actionPerformed\cf7 (\cf5 ActionEvent\cf0  event\cf7 )\cf0 \
\'a0\'a0\'a0\'a0\cf7 \{\cf0 \
\'a0\'a0\'a0\'a0  \cf5 String\cf0  which \cf6 =\cf0  event.\cf10 getActionCommand\cf7 ()\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:18:14 pm
\fs26 \
\pard\pardeftab720

\b \cf0 In our program, what should change when a button is clicked?
\b0 \
\pard\pardeftab720
\cf4 bluebandit21\cf0  
\fs20 9:18:42 pm
\fs26 \
total?\
\cf4 ScottBusche\cf0  
\fs20 9:18:42 pm
\fs26 \
The total variable.\
\cf4 teachm\cf0  
\fs20 9:18:42 pm
\fs26 \
total\
\cf4 k77frank\cf0  
\fs20 9:18:42 pm
\fs26 \
total\
\cf4 MathWolf\cf0  
\fs20 9:18:42 pm
\fs26 \
total\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:19:24 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Certainly the amount of money in the machine changes no matter what, and that means the coin message label will change too. But we'll also change the status. If you get your change back, the status will report how much you get back. Otherwise, if you're just adding a coin, we won't display anything there.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:19:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So one of the buttons is a little different than the others. Which one?
\b0 \
\pard\pardeftab720
\cf4 PiCrazy31415\cf0  
\fs20 9:19:50 pm
\fs26 \
get change back\
\cf4 chenjamin\cf0  
\fs20 9:19:50 pm
\fs26 \
backB\
\cf4 ScottBusche\cf0  
\fs20 9:19:50 pm
\fs26 \
The get change button.\
\cf4 Tungsten\cf0  
\fs20 9:19:50 pm
\fs26 \
Get change back\
\cf4 ReciterOfPi\cf0  
\fs20 9:19:50 pm
\fs26 \
backB\
\cf4 Dragon18\cf0  
\fs20 9:19:50 pm
\fs26 \
get change back\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:19:51 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The get your change back button is the odd one out. Let's deal with that one first. So what's the next line?
\b0 \
\pard\pardeftab720
\cf4 JRY\cf0  
\fs20 9:21:17 pm
\fs26 \
if (which.equals("Get change back")) \{\
\cf4 chenjamin\cf0  
\fs20 9:21:17 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 if
\f2\b0  \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Get change back"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:21:30 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0  if \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Get change back"\cf7 ))\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:21:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's another approach for when the buttons do not have distinct text. The variable event has another method called getSource(). It returns a reference to the object that caused the event. Which object is that here?
\b0 \
\pard\pardeftab720
\cf4 JRY\cf0  
\fs20 9:22:15 pm
\fs26 \
backB\
\cf4 piis3141592653\cf0  
\fs20 9:22:15 pm
\fs26 \
backB\
\cf4 bluebandit21\cf0  
\fs20 9:22:15 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 backB\
\pard\pardeftab720

\f0 \cf4 chenjamin\cf0  
\fs20 9:22:15 pm
\fs26 \
backB\
\cf4 MathWolf\cf0  
\fs20 9:22:15 pm
\fs26 \
backB\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:22:16 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It's backB. So instead of using getActionCommand, we could write:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:22:18 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0  if \cf7 (\cf0 event.\cf10 getSource\cf7 ()\cf0  \cf6 ==\cf0  backB\cf7 )\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:22:19 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Note we want to use == here for a change, since we want to make sure the source is the actual object backB.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:22:38 pm
\fs26 \
\pard\pardeftab720

\b \cf0 No matter how we determine what was clicked, in this particular case, we have to change the status, the coin message, and the total. To change the text of a label, we use the setText method. Can you fill in the three lines of code we need for this case?
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 9:24:38 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0status.\cf10 setText\cf7 (\cf8 "Giving change"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0coinmesg.\cf10 setText\cf7 (\cf8 "Coins: "\cf0  \cf6 +\cf0  total\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 bluebandit21\cf0  
\fs20 9:24:38 pm
\fs26 \
status.setText("You have gotten "+total+" cents back.") total=0\
\cf4 JRY\cf0  
\fs20 9:24:38 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 status.\cf10 setText\cf7 (\cf8 "Change returned: "\cf0  \cf6 +\cf0  total\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0coinmesg.\cf10 setText\cf7 (\cf8 "Coins: 0"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 chenjamin\cf0  
\fs20 9:24:38 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0status.\cf10 setText\cf7 (\cf8 "Your change has been refunded"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0coinmesg.\cf10 setText\cf7 (\cf8 "Cents"\cf6 +\cf0 total\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:25:01 pm
\fs26 \
\pard\pardeftab720

\b \cf0 None of these answers is perfect, but they're close.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:25:23 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's how I would do it (using the ActionCommand approach in the test; the body's the same either way):
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:25:25 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0  if \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Get change back"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0status.\cf10 setText\cf7 (\cf8 "You get "\cf0  \cf6 +\cf0  total \cf6 +\cf0  \cf8 " back"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0coinmesg.\cf10 setText\cf7 (\cf8 "Cents: "\cf6 +\cf0 total\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0  \cf7 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:25:38 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Can the order of these lines be changed?
\b0 \
\pard\pardeftab720
\cf4 JRY\cf0  
\fs20 9:25:50 pm
\fs26 \
No\
\cf4 MathWolf\cf0  
\fs20 9:25:50 pm
\fs26 \
NO\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:25:54 pm
\fs26 \
\pard\pardeftab720

\b \cf0 As is, no. We need to make sure we use the old total in the status, so that comes first. And we need to use the new total in the coin message, so that's last.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:26:10 pm
\fs26 \
\pard\pardeftab720

\b \cf0 The other three buttons do nearly the same thing, except they add different numbers to the total. So we could use an else case with an if inside it to distinguish what to add. Here's the start:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:26:13 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf12 void\cf0  actionPerformed\cf7 (\cf5 ActionEvent\cf0  event\cf7 )\cf0 \
\'a0\'a0\'a0\'a0\cf7 \{\cf0 \
\'a0\'a0\'a0\'a0  \cf5 String\cf0  which \cf6 =\cf0  event.\cf10 getActionCommand\cf7 ()\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0  if \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Get change back"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0status.\cf10 setText\cf7 (\cf8 "You get "\cf0  \cf6 +\cf0  total \cf6 +\cf0  \cf8 " back"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0coinmesg.\cf10 setText\cf7 (\cf8 "Cents: "\cf6 +\cf0 total\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0  \cf7 \}\cf0 \
\'a0\'a0\'a0\'a0  else\
\'a0\'a0\'a0\'a0  \cf7 \{\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:26:20 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Can you put in the if that follows to adjust total appropriately?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:27:02 pm
\fs26 \
\pard\pardeftab720

\b \cf0 These are simpler. To get the total right, you just need to increment total correctly. (We'll deal with updating the display in a second.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:27:57 pm
\fs26 \
\pard\pardeftab720

\b \cf0 So, for example, if I push the "Add a nickel" button, how much do I want to add to total?
\b0 \
\pard\pardeftab720
\cf4 ScottBusche\cf0  
\fs20 9:28:11 pm
\fs26 \
5\
\cf4 connor0728\cf0  
\fs20 9:28:11 pm
\fs26 \
5\
\cf4 chutney\cf0  
\fs20 9:28:11 pm
\fs26 \
Five\
\cf4 JRY\cf0  
\fs20 9:28:11 pm
\fs26 \
5\
\cf4 PiCrazy31415\cf0  
\fs20 9:28:11 pm
\fs26 \
5\
\cf4 eyl766\cf0  
\fs20 9:28:11 pm
\fs26 \
5\
\cf4 moppr\cf0  
\fs20 9:28:11 pm
\fs26 \
5 cents\
\cf4 ReciterOfPi\cf0  
\fs20 9:28:11 pm
\fs26 \
5 cents.\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:28:35 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Yep. So in the else block, how do we check that the "Add a nickel" button was pressed and then add 5 to total?
\b0 \
\pard\pardeftab720
\cf4 chenjamin\cf0  
\fs20 9:29:12 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 if
\f2\b0 \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Add a nickel"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0total \cf6 +=\cf0  \cf11 5\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f3\b else
\f2\b0  
\f3\b if
\f2\b0 \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Add a dime"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0total \cf6 +=\cf0  \cf11 10\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f3\b else
\f2\b0  
\f3\b if
\f2\b0  \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Add a quarter"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0total \cf6 +=\cf0  \cf11 25\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf4 MathWolf\cf0  
\fs20 9:29:12 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 else
\f2\b0 \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f3\b if
\f2\b0  \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Add a nickel"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 total \cf6 +=\cf0  \cf11 5\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f3\b else
\f2\b0  
\f3\b if
\f2\b0  \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Add a dime"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 total \cf6 +=\cf0  \cf11 10\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 
\f3\b else
\f2\b0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 total \cf6 +=\cf0  \cf11 25\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0 \cf7 \}\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:29:14 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's how to do it:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:29:15 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf12 void\cf0  actionPerformed\cf7 (\cf5 ActionEvent\cf0  event\cf7 )\cf0 \
\'a0\'a0\'a0\'a0\cf7 \{\cf0 \
\'a0\'a0\'a0\'a0  \cf5 String\cf0  which \cf6 =\cf0  event.\cf10 getActionCommand\cf7 ()\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0  if \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Get change back"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0status.\cf10 setText\cf7 (\cf8 "You get "\cf0  \cf6 +\cf0  total \cf6 +\cf0  \cf8 " back"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0coinmesg.\cf10 setText\cf7 (\cf8 "Cents: "\cf6 +\cf0 total\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0  \cf7 \}\cf0 \
\'a0\'a0\'a0\'a0  else\
\'a0\'a0\'a0\'a0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Add a nickel"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0  total \cf6 +=\cf0  \cf11 5\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else if \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Add a dime"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0  total \cf6 +=\cf0  \cf11 10\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0  total \cf6 +=\cf0  \cf11 25\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:29:19 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Since there's only three coin buttons, we can use an else for the final case. Now we have to change the two labels. Recall that we're just making the status blank.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:29:25 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's what we need to do:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:29:26 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0status.\cf10 setText\cf7 (\cf8 ""\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0coinmesg.\cf10 setText\cf7 (\cf8 "Cents: "\cf6 +\cf0 total\cf7 )\cf6 ;\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:29:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 And here's the complete actionPerformed method:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:29:29 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
\'a0\'a0\'a0\'a0public \cf12 void\cf0  actionPerformed\cf7 (\cf5 ActionEvent\cf0  event\cf7 )\cf0 \
\'a0\'a0\'a0\'a0\cf7 \{\cf0 \
\'a0\'a0\'a0\'a0  \cf5 String\cf0  which \cf6 =\cf0  event.\cf10 getActionCommand\cf7 ()\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0  if \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Get change back"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0status.\cf10 setText\cf7 (\cf8 "You get "\cf0  \cf6 +\cf0  total \cf6 +\cf0  \cf8 " back"\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0total \cf6 =\cf0  \cf11 0\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0coinmesg.\cf10 setText\cf7 (\cf8 "Cents: "\cf6 +\cf0 total\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0  \cf7 \}\cf0 \
\'a0\'a0\'a0\'a0  else\
\'a0\'a0\'a0\'a0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0if \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Add a nickel"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0  total \cf6 +=\cf0  \cf11 5\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else if \cf7 (\cf0 which.\cf10 equals\cf7 (\cf8 "Add a dime"\cf7 ))\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0  total \cf6 +=\cf0  \cf11 10\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0else\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0  total \cf6 +=\cf0  \cf11 25\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0status.\cf10 setText\cf7 (\cf8 ""\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0coinmesg.\cf10 setText\cf7 (\cf8 "Cents: "\cf6 +\cf0 total\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0  \cf7 \}\cf0 \
\'a0\'a0\'a0\'a0\cf7 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:29:44 pm
\fs26 \
\pard\pardeftab720

\b \cf0 If you run the program now, you should get the buttons and the labels. Clicking the buttons should change the labels appropriately.
\b0 \
\pard\pardeftab720
\cf4 williamyin08\cf0  
\fs20 9:29:57 pm
\fs26 \
couldn't you just use switchcase?\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:30:20 pm
\fs26 \
\pard\pardeftab720

\b \cf0 I think we established last week that switches can switch on String data, so that'd be fine too if you want.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:30:30 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (Established before class, that is.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:30:37 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We're almost done with this class. Before moving on, we have to think how this class will interact with the other piece of our program \'96 the Soda objects. When we try to get a Soda, what do we need to know from the ChangeBin?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:31:37 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (Hang with me for just another minute or two. We're almost done with this section. I'll make a post about adding images, the last part of today's lesson, on the message board.)
\b0 \
\pard\pardeftab720
\cf4 piis3141592653\cf0  
\fs20 9:32:14 pm
\fs26 \
and check if there is enough money\
\cf4 manbugbeebee\cf0  
\fs20 9:32:14 pm
\fs26 \
if we have put in enough money\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:32:15 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We have to know what the amount of money is, so we can tell if it's enough to buy the beverage. What do we need to add to ChangeBin to allow this?
\b0 \
\pard\pardeftab720
\cf4 chenjamin\cf0  
\fs20 9:32:37 pm
\fs26 \
a getTotal method\
\cf4 MSTang\cf0  
\fs20 9:32:37 pm
\fs26 \
getter for total\
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:33:08 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Exactly. We need to supply an accessor method for our total variable. I'll call mine getChange. Can you write it?
\b0 \
\pard\pardeftab720
\cf4 Tungsten\cf0  
\fs20 9:33:35 pm
\fs26 \
\pard\pardeftab720

\f2 \cf0 \'a0\'a0\'a0\'a0
\f3\b public
\f2\b0  
\f3\b \cf12 int
\f2\b0 \cf0  getTotal\cf7 ()\cf0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f3\b return
\f2\b0  
\f3\b this
\f2\b0 .\cf10 total\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\cf7 \}\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:33:37 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's mine, condensed on one line:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:33:39 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
  public \cf12 int\cf0  getChange\cf7 ()\cf0  \cf7 \{\cf0  return total\cf6 ;\cf0  \cf7 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:33:40 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Once we get a Soda, what happens to the ChangeBin?
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:35:37 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Looking back at the original description: We have to report what the soda is and how much change was received. (The machine doesn't keep any money in it. Like usual vending machines, when you buy a soda, any change that's left is returned to you.) This requires changing the status. Notice that the status also changes if I try to get a soda but I can't. I wrote a single setStatus method that will allow the Soda to put whatever text it wants into the status message. Can you fill in the code for it?
\b0 \
\pard\pardeftab720
\cf4 MathWolf\cf0  
\fs20 9:35:52 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 public
\f2\b0  
\f3\b \cf12 void
\f2\b0 \cf0  setStatus\cf7 (\cf5 String\cf0  mesg\cf7 )\cf0 \
\'a0\'a0\'a0\'a0\cf7 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0status.\cf10 setText\cf7 (\cf0 mesg\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\cf7 \}\cf0 \
\pard\pardeftab720

\f0 \cf4 chenjamin\cf0  
\fs20 9:35:52 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 public
\f2\b0  
\f3\b \cf12 void
\f2\b0 \cf0  setStatus\cf7 (\cf5 String\cf0  status\cf7 )\cf0  \cf7 \{\cf0 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0
\f3\b this
\f2\b0 .\cf10 status\cf0 .\cf10 setText\cf7 (\cf0 status\cf7 )\cf6 ;\cf0 \
\'a0\'a0\'a0\'a0\cf7 \}\cf0 \
\pard\pardeftab720

\f0\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:36:02 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Here's the one-liner:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:36:04 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
  public \cf12 void\cf0  setStatus\cf7 (\cf5 String\cf0  s\cf7 )\cf0  \cf7 \{\cf0  status.\cf10 setText\cf7 (\cf0 s\cf7 )\cf6 ;\cf0  \cf7 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:36:05 pm
\fs26 \
\pard\pardeftab720

\b \cf0 If we do get a soda, we have to clear the money, similar to clicking the "get change back" button:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:36:27 pm
\fs26 \
\pard\pardeftab720

\f3\b \cf0 \'a0\
  public \cf12 void\cf0  reset\cf7 ()\cf0  \cf7 \{\cf0  total \cf6 =\cf0  \cf11 0\cf6 ;\cf0  coinmesg.\cf10 setText\cf7 (\cf8 "Cents: "\cf6 +\cf0 total\cf7 )\cf6 ;\cf7 \}\cf0 \
\pard\pardeftab720

\f0 \cf2 dkneezel
\b0 \cf0  
\fs20 9:36:43 pm
\fs26 \
\pard\pardeftab720

\b \cf0 We'll see how these methods are called as we write the Soda class. (Which I will talk about on the message board.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:37:23 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Note for anyone whose code isn't quite right: The correct code is now available.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:37:33 pm
\fs26 \
\pard\pardeftab720

\b \cf0 It's in the Handouts section.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:37:41 pm
\fs26 \
\pard\pardeftab720

\b \cf3 PART 5: SUMMARY
\b0 \cf0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:37:42 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Today we worked through a complete program using a GUI. This program featured:
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:37:45 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Everything in its own window
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:37:46 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Multiple panels with their own individual layouts
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:37:48 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Text, pictures and colors in JLabels
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:38:12 pm
\fs26 \
\pard\pardeftab720

\b \cf0 (Discussion of the pictures to appear on the message board.)
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:38:13 pm
\fs26 \
\pard\pardeftab720

\b \cf0 JButtons that use listeners to do different things when clicked
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:38:16 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Of course, these are just a few of the pieces of a GUI. You could also have:\
JTextField objects that can be used to allow for typed commands. Hitting Enter triggers an event that can be caught by an ActionListener.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:38:22 pm
\fs26 \
\pard\pardeftab720

\b \cf0 JRadioButton and JCheckBox objects that allow the user to choose between different options.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:38:25 pm
\fs26 \
\pard\pardeftab720

\b \cf0 A JList or a JComboBox that gives a sequence of items
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:38:28 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Mouse listeners to deal with clicks or mouse movement
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:38:33 pm
\fs26 \
\pard\pardeftab720

\b \cf0 Now that you know the basics, you should be able to pick up on how these other types work quickly.
\b0 \
\pard\pardeftab720

\b \cf2 dkneezel
\b0 \cf0  
\fs20 9:38:37 pm
\fs26 \
\pard\pardeftab720

\b \cf0 For next week, we look at a very powerful but somewhat mysterious programming technique called recursion. See you then!\
\
\pard\pardeftab720

\fs24 \cf0 PART 4: SODAS (PICTURES AND COLORS)
\b0 \
\
Make a Soda class. Just like our ChangeBin class, we want the Soda class to extend JPanel, so we can put it into our JFrame.\
\
\pard\pardeftab720

\f1 \cf0 {{\NeXTGraphic 1__#$!@%!#__vendingDone.png \width7500 \height6750 \noorient
}¬}\pard\pardeftab720

\f0 \cf0 \
\
Look at the screenshot. What instance variables will it need?\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls1\ilvl0\cf0 {\listtext	\'95	}Each soda has a different name. We're going to need to remember that in order to report what has been bought.\
{\listtext	\'95	}We also need to keep track of how many sodas are in the machine at the moment.\
{\listtext	\'95	}The message about how many cans are left changes as we buy sodas. Like status and coinmesg in ChangeBin, we'll need that JLabel to be an instance variable too.\
{\listtext	\'95	}Note that the image and the button don't change once they're set up. So those objects can be local to the constructor.\
{\listtext	\'95	}The last instance variable we need is a reference to the ChangeBin object, so the Soda's button handler can access it.\
\pard\pardeftab720
\cf0 \
My names for these variables: 
\b brand 
\b0 for the kind of soda, 
\b numLeft 
\b0 for how many are left, 
\b message 
\b0 for the label, and 
\b cb 
\b0 for the ChangeBin.\
\
Here are the declarations for the beginning of the class:\
\
\pard\pardeftab720

\f6\b\fs18 \cf14 \cb15 Code:
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls2\ilvl0
\f3\b\fs24 \cf0 \cb16 {\listtext	1.	}public
\f2\b0 \cf17  
\f3\b \cf0 class
\f2\b0 \cf17  Soda 
\f3\b \cf0 extends
\f2\b0 \cf17  {\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AJPanel+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 JPanel}} \cf19 \{\cf17 \
{\listtext	2.	}\'a0 
\f3\b \cf0 public
\f2\b0 \cf17  
\f3\b \cf0 static
\f2\b0 \cf17  
\f3\b \cf0 final
\f2\b0 \cf17  \cf20 int\cf17  CAP = \cf11 2\cf17 ;\
{\listtext	3.	}\'a0 
\f3\b \cf0 public
\f2\b0 \cf17  
\f3\b \cf0 static
\f2\b0 \cf17  
\f3\b \cf0 final
\f2\b0 \cf17  \cf20 int\cf17  COST = \cf11 60\cf17 ;\
{\listtext	4.	}\'a0 
\f3\b \cf0 private
\f2\b0 \cf17  {\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AString+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 String}} brand;\
{\listtext	5.	}\'a0 
\f3\b \cf0 private
\f2\b0 \cf17  \cf20 int\cf17  numLeft;\
{\listtext	6.	}\'a0 
\f3\b \cf0 private
\f2\b0 \cf17  {\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AJLabel+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 JLabel}} message;\
{\listtext	7.	}\'a0 
\f3\b \cf0 private
\f2\b0 \cf17  ChangeBin cb;\
\pard\pardeftab720

\f0 \cf0 \cb1 \
\
I snuck in a couple of extra things in. 
\b COST
\b0  is how much a soda costs. 
\b CAP 
\b0 is the capacity of the machine; i.e. how many sodas it starts with.\
\
What does the word "static" tell you about the variable?\
\
The keyword "static" tells you that the variable is a class variable. In other words, it means that every Soda object uses this value. As a consequence, Java can store this value more efficiently. Additionally, when a variable is static you can refer to it without needing to have created any Soda objects.\
\
What about the keyword "final"?\
\
"Final" means that the variable can't be altered later in the code. Neither static nor final are necessary for doing this, but they do make things more efficient for the compiler.\
\
(Technical note: If you declare a final variable that contains an object type, as opposed to one of the eight primitive data types (byte, short, int, long; float, double; boolean; char), it is still possible to make changes to that object's internal fields, for example using any mutator methods the class might have defined. What "final" REALLY means in a variable declaration is that this variable name will always refer to whatever data or object you assign to the variable when you first initialize it. THAT'S what is actually "final" about such a variable.)\
\
Now that we have instance variables taken care of, we can move to the constructor. Should this be a default constructor, like in ChangeBin?\
\
No, we need more information since each Soda object will be different. Which of our instance variables will need to get information from parameters?\
\
The 
\b brand 
\b0 needs to be passed in, obviously. 
\b numLeft 
\b0 and 
\b message 
\b0 don't; the 
\b numLeft 
\b0 is 
\b CAP 
\b0 to start, and we can construct the 
\b message 
\b0 ourselves.\
\
Our ChangeBin object will also be needed to passed in as a parameter. Why? What would happen if we just made cb a new ChangeBin() inside the constructor for Soda?\
\
Then all Sodas would have their own piles of change. We want one set of coins to be applied to all the Sodas. So the solution is to have Machine make the ChangeBin object and pass it to each Soda object.\
\
There's one more parameter. Can you tell me what we need?\
\
We need to know which image to use. Here I'll pass in the name of the image file. So here's the constructor header:\
\
\pard\pardeftab720

\f6\b\fs18 \cf14 \cb15 Code:
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls3\ilvl0
\f3\b\fs24 \cf0 \cb16 {\listtext	1.	}public
\f2\b0 \cf17  Soda\cf19 ({\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AString+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 String}}\cf17  name, {\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AString+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 String}} imageFile, ChangeBin bin\cf19 )\cf17  \cf19 \{\cf17 \
\pard\pardeftab720

\f0 \cf0 \cb1 \
\
Here's the start of the constructor filling in initializations of three of the instance variables:\
\
\pard\pardeftab720

\f6\b\fs18 \cf14 \cb15 Code:
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls4\ilvl0
\f2\fs24 \cf17 \cb16 {\listtext	1.	}\'a0
\f3\b \cf0 public
\f2\b0 \cf17  Soda\cf19 ({\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AString+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 String}}\cf17  name, {\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AString+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 String}} imageFile, ChangeBin bin\cf19 )\cf17  \cf19 \{\cf17 \
{\listtext	2.	}\'a0 \'a0 
\f3\b \cf0 super
\f2\b0 \cf19 ()\cf17 ;\
{\listtext	3.	}\'a0 \'a0 brand = name;\
{\listtext	4.	}\'a0 \'a0 numLeft = CAP;\
{\listtext	5.	}\'a0 \'a0 cb = bin;\
\pard\pardeftab720

\f0 \cf0 \cb1 \
\
Note: As I said previously in class when we were writing the ChangeBin constructor, when we're writing constructors for something in a subclass, if we don't explicitly call 
\b some
\b0  superclass constructor, Java will call the superclass's default constructor 
\b super()
\b0  for us. So it was not strictly necessary for me to make my first line above be a call to 
\b super()
\b0 . Probably, for uniformity of presentation, I should go back and edit my discussion of writing the ChangeBin class and just put in an explicit call to 
\b super()
\b0  there too, since I think it improves readability, in that it serves as an extra reminder that this class we're writing is a subclass of something.\
\
How we handle 
\b message
\b0  will be a little different, since it includes the picture of the soda can. So first we have to set up the image.\
\
The class we use for that is 
\b ImageIcon
\b0 . As usual for various classes in Java's libraries, there are a bunch of constructors available. You can build an image that you create in Java using the Image class, or you can create one given its URL or the specific bytes that make up the image. Here we will have the image in a file, so we'll use the one that takes the name of the file.\
\
\pard\pardeftab720

\f6\b\fs18 \cf14 \cb15 Code:
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls5\ilvl0
\f3\b\fs24 \cf18 \cb16 {\listtext	1.	}{\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AImageIcon+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt ImageIcon}}
\f2\b0 \cf17  icon = 
\f3\b \cf0 new
\f2\b0 \cf17  {\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AImageIcon+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 ImageIcon}}\cf19 (\cf17 imageFile,brand\cf19 )\cf17 ;\
\pard\pardeftab720

\f0 \cf0 \cb1 \
\
The first parameter is the filename that we get from the parameter. The second parameter is a description of the file. The associated brand name seems to be a good choice for that. (What's the description string for? According to Java's documentation, "The description argument is a string that allows assistive technologies to help a visually impaired user understand what information the icon conveys.")\
\
Now on to the label. In this case, it has both an image and text. So we'll use the constructor that takes those as parameters. You'll notice that the text is the first parameter, although it will be displayed at the trailing (right) side of the image:\
\
\pard\pardeftab720

\f6\b\fs18 \cf14 \cb15 Code:
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls6\ilvl0
\f2\fs24 \cf17 \cb16 {\listtext	1.	}message = 
\f3\b \cf0 new
\f2\b0 \cf17  {\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AJLabel+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 JLabel}}\cf19 (\cf4 "Cans left = "\cf17  + numLeft, icon, {\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AJLabel+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 JLabel}}.CENTER\cf19 )\cf17 ;\
\pard\pardeftab720

\f0 \cf0 \cb1 \
\
The last parameter gives the vertical alignment of the text and image in the label.\
\
What else has to be done in the constructor?\
\
We have to create and initialize the button. We need to set a layout for the panel. We need to add the two widgets to the panel. We have to create a button handler and attach it to the button.\
\
Here's the code for all of this:\
\
\pard\pardeftab720

\f6\b\fs18 \cf14 \cb15 Code:
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls7\ilvl0
\f2\fs24 \cf17 \cb16 {\listtext	1.	}\'a0 \'a0{\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AJButton+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 JButton}} dispenseB = 
\f3\b \cf0 new
\f2\b0 \cf17  {\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AJButton+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 JButton}}\cf19 (\cf17 brand\cf19 )\cf17 ;\
{\listtext	2.	}\'a0 \'a0 setLayout\cf19 (
\f3\b \cf0 new
\f2\b0 \cf17  {\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AFlowLayout+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 FlowLayout}}\cf19 ())\cf17 ;\
{\listtext	3.	}\'a0 \'a0 add\cf19 (\cf17 message\cf19 )\cf17 ;\
{\listtext	4.	}\'a0 \'a0 add\cf19 (\cf17 dispenseB\cf19 )\cf17 ;\
{\listtext	5.	}\'a0 \'a0 ButtonHandler bh = 
\f3\b \cf0 new
\f2\b0 \cf17  ButtonHandler\cf19 ()\cf17 ;\
{\listtext	6.	}\'a0 \'a0 dispenseB.addActionListener\cf19 (\cf17 bh\cf19 )\cf17 ;\
\pard\pardeftab720

\f0 \cf0 \cb1 \
\
To be a little different, this one uses a FlowLayout rather than a GridLayout. You could use a Grid of 1 row and 2 columns. You can change it later to see the difference.\
\
What are the first line of the ButtonHandler class and the method it needs to have?\
\
\pard\pardeftab720

\f6\b\fs18 \cf14 \cb15 Code:
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls8\ilvl0
\f2\fs24 \cf17 \cb16 {\listtext	1.	}\'a0\
{\listtext	2.	}\'a0 
\f3\b \cf0 private
\f2\b0 \cf17  
\f3\b \cf0 class
\f2\b0 \cf17  ButtonHandler 
\f3\b \cf0 implements
\f2\b0 \cf17  {\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AActionListener+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 ActionListener}}\
{\listtext	3.	}\'a0 \cf19 \{\cf17 \
{\listtext	4.	}\'a0 \'a0 
\f3\b \cf0 public
\f2\b0 \cf17  \cf20 void\cf17  actionPerformed\cf19 ({\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AActionEvent+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 ActionEvent}}\cf17  event\cf19 )\cf17 \
{\listtext	5.	}\'a0 \'a0 \cf19 \{\cf17 \
\pard\pardeftab720

\f0 \cf0 \cb1 \
\
In this case, we don't really need to make use of the event. There's exactly one button per Soda object, so that's the only thing that can generate something the ButtonHandler will deal with.\
\
Now here's the full code for this method. There's only one thing you haven't seen before:\
\
\pard\pardeftab720

\f6\b\fs18 \cf14 \cb15 Code:
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls9\ilvl0
\f2\fs24 \cf17 \cb16 {\listtext	1.	}\'a0\
{\listtext	2.	}\'a0 \'a0 
\f3\b \cf0 public
\f2\b0 \cf17  \cf20 void\cf17  actionPerformed\cf19 ({\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AActionEvent+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 ActionEvent}}\cf17  event\cf19 )\cf17 \
{\listtext	3.	}\'a0 \'a0 \cf19 \{\cf17 \
{\listtext	4.	}\'a0 \'a0 \'a0 \cf20 int\cf17  cents;\
{\listtext	5.	}\'a0 \'a0 \'a0 {\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AString+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 String}} mesg;\
{\listtext	6.	}\'a0 \'a0 \'a0 cents = cb.getChange\cf19 ()\cf17 ;\
{\listtext	7.	}\'a0 \'a0 \'a0 \cf21 if\cf17  \cf19 (\cf17 cents >= COST && numLeft > \cf11 0\cf19 )\cf17 \
{\listtext	8.	}\'a0 \'a0 \'a0 \cf19 \{\cf17 \
{\listtext	9.	}\'a0 \'a0 \'a0 \'a0 numLeft--;\
{\listtext	10.	}\'a0 \'a0 \'a0 \'a0 message.setText\cf19 (\cf4 "Cans left = "\cf17  + numLeft\cf19 )\cf17 ;\
{\listtext	11.	}\'a0 \'a0 \'a0 \'a0 \cf21 if\cf17  \cf19 (\cf17 numLeft == \cf11 0\cf19 )\cf17 \
{\listtext	12.	}\'a0 \'a0 \'a0 \'a0 \'a0 message.setForeground\cf19 ({\field{\*\fldinst{HYPERLINK "http://www.google.com/search?hl=en&q=allinurl%3AColor+java.sun.com&btnI=I%27m%20Feeling%20Lucky"}}{\fldrslt 
\f3\b \cf18 Color}}\cf17 .orange\cf19 )\cf17 ;\
{\listtext	13.	}\'a0 \'a0 \'a0 \'a0 mesg = \cf4 "You get "\cf17  + brand;\
{\listtext	14.	}\'a0 \'a0 \'a0 \'a0 \cf21 if\cf17  \cf19 (\cf17 cents != COST\cf19 )\cf17 \
{\listtext	15.	}\'a0 \'a0 \'a0 \'a0 \'a0 mesg = mesg + \cf4 " & "\cf17  + \cf19 (\cf17 cents-COST\cf19 )\cf17  + \cf4 " cents"\cf17 ;\
{\listtext	16.	}\'a0 \'a0 \'a0 \'a0 cb.setStatus\cf19 (\cf17 mesg\cf19 )\cf17 ;\
{\listtext	17.	}\'a0 \'a0 \'a0 \'a0 cb.reset\cf19 ()\cf17 ;\
{\listtext	18.	}\'a0 \'a0 \'a0 \cf19 \}\cf17 \
{\listtext	19.	}\'a0 \'a0 \'a0 \cf21 else\cf17  \cf21 if\cf17  \cf19 (\cf17 cents >= COST && numLeft == \cf11 0\cf19 )\cf17 \
{\listtext	20.	}\'a0 \'a0 \'a0 \cf19 \{\cf17 \
{\listtext	21.	}\'a0 \'a0 \'a0 \'a0 cb.setStatus\cf19 (\cf4 "No "\cf17  + brand + \cf4 " available!"\cf19 )\cf17 ;\
{\listtext	22.	}\'a0 \'a0 \'a0 \cf19 \}\cf17 \
{\listtext	23.	}\'a0 \'a0 \'a0 \cf21 else\cf17  \cf21 if\cf17  \cf19 (\cf17 cents < COST\cf19 )\cf17 \
{\listtext	24.	}\'a0 \'a0 \'a0 \cf19 \{\cf17 \
{\listtext	25.	}\'a0 \'a0 \'a0 \'a0 cb.setStatus\cf19 (\cf4 "You need "\cf17  + \cf19 (\cf17 COST-cents\cf19 )\cf17  + \cf4 " more"\cf19 )\cf17 ;\
{\listtext	26.	}\'a0 \'a0 \'a0 \cf19 \}\cf17 \
{\listtext	27.	}\'a0 \'a0 \cf19 \}\cf17 \
\pard\pardeftab720

\f0 \cf0 \cb1 \
\
We use the ChangeBin's getChange method to figure out how much is in the machine. Then we check the total and whether or not there is any soda of this type left to decide what to do.\
\
If we meet the conditions for getting a soda, we need to decrease the number of cans of the type in the machine and change the message. Then what do we do? 
\i We change the color of the text of the message to give a visual clue when the machine is out of this type of soda.
\i0  The JLabel method 
\b setForeground 
\b0 does this. It takes a Color object as a parameter.\
\
In the remainder of the case, we construct the message to display in the change bin status message. We add in the change left if it's non-zero. We then call setStatus to set up the message, and we reset the total.\
\
What do the else cases do?\
\
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls10\ilvl0\cf0 {\listtext	\'95	}The first one reports that the soda was not available.\
{\listtext	\'95	}The second says the user didn't put in enough change.\
\pard\pardeftab720
\cf0 \
Add in the requisite curly braces, if you haven't already, to finish the definition. \
\
Now let's go back to Machine. What do we have to do here?\
\
We have to create the Soda objects and add them to the JFrame. 
\b To make the Sodas, we need images. There are three posted on the course home page. You can download them and save them at the top level of the project.
\b0  Once you do that, we make the objects like this:\
\
\pard\pardeftab720

\f6\b\fs18 \cf14 \cb15 Code:
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls11\ilvl0
\f2\fs24 \cf17 \cb16 {\listtext	1.	}\'a0 \'a0Soda grapeSplash = 
\f3\b \cf0 new
\f2\b0 \cf17  Soda\cf19 (\cf4 "Grape Splash"\cf17 ,\cf4 "grapeSplash.png"\cf17 , bin\cf19 )\cf17 ;\
{\listtext	2.	}\'a0 \'a0 Soda locaCola = 
\f3\b \cf0 new
\f2\b0 \cf17  Soda\cf19 (\cf4 "Loca Cola"\cf17 , \cf4 "locaCola.png"\cf17 , bin\cf19 )\cf17 ;\
{\listtext	3.	}\'a0 \'a0 Soda sprintSoda = 
\f3\b \cf0 new
\f2\b0 \cf17  Soda\cf19 (\cf4 "Sprint"\cf17 , \cf4 "sprintSoda.png"\cf17 , bin\cf19 )\cf17 ;\
\pard\pardeftab720

\f0 \cf0 \cb1 \
\
How do we add them to the JFrame? We use the add method belonging to our Machine object (extended from JFrame)\
\
\pard\pardeftab720

\f6\b\fs18 \cf14 \cb15 Code:
\b0 \
\pard\tx220\tx720\pardeftab720\li720\fi-720
\ls12\ilvl0
\f2\fs24 \cf17 \cb16 {\listtext	1.	}\'a0 \'a0outputFrame.add\cf19 (\cf17 grapeSplash\cf19 )\cf17 ;\
{\listtext	2.	}\'a0 \'a0 outputFrame.add\cf19 (\cf17 locaCola\cf19 )\cf17 ;\
{\listtext	3.	}\'a0 \'a0 outputFrame.add\cf19 (\cf17 sprintSoda\cf19 )\cf17 ;\
\pard\pardeftab720

\f0 \cf0 \cb1 \
\
Put these after bin is added. And make sure the grid is the appropriate size (4x1).\
\
And that's it! You're done with incorporating the Soda class into our program. Run it and admire your handiwork!}