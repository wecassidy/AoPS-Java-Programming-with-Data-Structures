import java.awt.Point;
import java.util.ArrayList;


public class Week11Problem6 {

	public static void main(String[] args){
		int[][] grid = {
				{1, 2, 5, 4, 5},
				{6, 7, 10, 9, 5},
				{11, 12, 13, 14, 5},
				{16, 17, 18, 19, 0},
				{21, 22, 23, 24, 5}
		};

		int[] path = new int[5];
		path[0] = grid[0][0];
		path = getPath(grid, new Point(0, 0), path, new ArrayList<int[]> ());

		for (int p : path) {
			System.out.println(p);
		}
	}

	public static int[] getPath(int[][] board, Point location, int[] path, ArrayList<int[]> paths) {
		if (location.y == board.length - 1) {
			int[] nextX;
			
			if (location.x == 0) {nextX = new int[] {location.x, location.x + 1};}
			else if (location.x == board[0].length - 1) {nextX = new int[] {location.x - 1, location.x};}
			else {nextX = new int[] {location.x - 1, location.x, location.x + 1};}
			
			for (int x : nextX) {
				path[location.x] = board[x][location.y];
				paths.add(path);
			}
			
			return path;
		}

		int[] nextX;

		if (location.x == 0) {
			nextX = new int[] {location.x, location.x + 1};
		}

		else if (location.x == board[0].length - 1) {
			nextX = new int[] {location.x - 1, location.x};
		}

		else {
			nextX = new int[] {location.x - 1, location.x, location.x + 1};
		}

		for (int newX : nextX) {
			path[location.x] = board[location.x][location.y];
			path = getPath(board, new Point(newX, location.y ++), path, paths);
		}

		int[] max = paths.get(0);
		
		for (int[] p : paths) {
			max = arraySum(p) > arraySum(max) ? p : max;
		}

		return max;
	}
	
	public static int arraySum(int[] array) {
		int sum = 0;
		
		for (int n : array) {
			sum += n;
		}
		
		return sum;
	}

}