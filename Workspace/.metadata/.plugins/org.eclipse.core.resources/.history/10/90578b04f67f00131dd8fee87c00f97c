import java.awt.Point;
import java.util.ArrayList;


public class Week11Problem6 {

	public static int[] getPath(int[][] board) {
		return getPath(board, 0, new int[board.length], new int[board.length]);
	}

	public static int[] getPath(int[][] board, int column, int[] path, int[] maxPath) {
		if (board.length == 1) {
			int[] nextC;

			if (column == 0) {nextC = new int[] {column, column + 1};}
			else if (column == board[0].length - 1) {nextC = new int[] {column - 1, column};}
			else {nextC = new int[] {column - 1, column, column + 1};}

			for (int c : nextC) {
				path[path.length - 1] = board[0][c];
				maxPath = arraySum(path) > arraySum(maxPath) ? path : maxPath;
			}

			return maxPath;
		}

		int[] nextC;

		if (column == 0) {nextC = new int[] {column, column + 1};}
		else if (column == board[0].length - 1) {nextC = new int[] {column - 1, column};}
		else {nextC = new int[] {column - 1, column, column + 1};}

		int[][] smallBoard = new int[board.length - 1][board[0].length];
		
		for (int i = 1; i < board.length; i ++) {
			smallBoard[i - 1] = board[i].clone();
		}
		
		for (int c : nextC) {
			path[board.length - smallBoard.length - 1] = smallBoard[0][c];
			maxPath = getPath(smallBoard, c, path, maxPath);
		}

		return maxPath;
	}

	public static int arraySum(int[] array) {
		int sum = 0;

		for (int n : array) {
			sum += n;
		}

		return sum;
	}
	
	public static void main(String[] args){
		int[][] grid = {
				{1, 2, 5, 4, 5},
				{6, 7, 10, 9, 5},
				{11, 12, 13, 14, 5},
				{16, 17, 18, 19, 0},
				{21, 22, 23, 24, 5}
		};
		
		int[] path = getPath(grid);

		for (int p : path) {
			System.out.println(p);
		}
	}

}