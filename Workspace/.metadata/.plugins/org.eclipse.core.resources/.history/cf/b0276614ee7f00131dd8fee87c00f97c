import java.awt.Point;
import java.util.ArrayList;


public class Week11Problem6 {

	public static int[] getPath(int[][] board) {
		return getPath(board, 0, new int[board.length], new int[board.length]);
	}

	public static int[] getPath(int[][] board, int locX, int[] path, int[] maxPath) {
		if (board.length == 1) {
			int[] nextX;

			if (locX == 0) {nextX = new int[] {locX, locX + 1};}
			else if (locX == board[0].length - 1) {nextX = new int[] {locX - 1, locX};}
			else {nextX = new int[] {locX - 1, locX, locX + 1};}

			for (int x : nextX) {
				//path[locX] = board[x][0];
			}

			return arraySum(path) > arraySum(maxPath) ? path : maxPath;
		}

		int[] nextX;

		if (locX == 0) {nextX = new int[] {locX, locX + 1};}
		else if (locX == board[0].length - 1) {nextX = new int[] {locX - 1, locX};}
		else {nextX = new int[] {locX - 1, locX, locX + 1};}

		int[][] smallBoard = new int[board.length - 1][board[0].length];
		
		for (int i = 1; i < board.length; i ++) {
			smallBoard[i - 1] = board[i];
		}
		
		for (int newX : nextX) {
			path[locX] = board[locX][0];
			maxPath = getPath(smallBoard, locX, path, maxPath);
		}

		return maxPath;
	}

	public static int arraySum(int[] array) {
		int sum = 0;

		for (int n : array) {
			sum += n;
		}

		return sum;
	}

	public static void showArray(Object[] array) {
		for (Object o : array) {
			System.out.print(o + " ");
		}
		
		System.out.print("\n");
	}
	
	public static void showArray(int[][] grid) {
		for (int[] a : grid) {
			for (int o : a) {
				System.out.print(o + " ");
			}
			
			System.out.print("\n");
		}
		
		System.out.print("\n");
	}
	
	public static void main(String[] args){
		int[][] grid = {
				{1, 2, 5, 4, 5},
				{6, 7, 10, 9, 5},
				{11, 12, 13, 14, 5},
				{16, 17, 18, 19, 0},
				{21, 22, 23, 24, 5}
		};
		
		showArray(grid);

		int[] path = new int[5];
		path[0] = grid[0][0];
		
		path = getPath(grid);

		for (int p : path) {
			System.out.println(p);
		}
	}

}