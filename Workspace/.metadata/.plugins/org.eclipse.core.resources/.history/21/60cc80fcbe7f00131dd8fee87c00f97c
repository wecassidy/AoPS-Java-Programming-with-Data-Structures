
public class Week11Problem6 {
	static int[] path = new int[5];
	static int sum; //largest sum found;

	public static void main(String[] args){
		int[][] grid = {
				{1, 2, 5, 4, 5},
				{6, 7, 10, 9, 5},
				{11, 12, 13, 14, 5},
				{16, 17, 18, 19, 0},
				{21, 22, 23, 24, 5}
		};

		int[] soFar = new int[5];
		soFar[0] = grid[0][0];
		path = getPath(grid, 0, 0, soFar, 0);

		for (int p : path) {
			System.out.println(p);
		}
	}

	public static int[] getPath(int[][] board, int currentX, int currentY, int[] soFar, int sum) {
		for (int p : path) {
			System.out.println(p);
		}
		if (currentY == board.length - 1) {
			int[] nextX;
			
			if (currentX == 0) {nextX = new int[] {currentX, currentX + 1};}

			else if (currentX == board[0].length - 1) {nextX = new int[] {currentX - 1, currentX};}

			else {nextX = new int[] {currentX - 1, currentX, currentX + 1};}
			
			for (int newX : nextX) {
				soFar[currentX] = board[currentX][currentY];
			}

			int currentSum = 0;

			for (int num : soFar) {currentSum += num;}

			if (currentSum > sum) {
				path = soFar;
				sum = currentSum;
			}

			return path;
		}

		int[] nextX;

		if (currentX == 0) {
			nextX = new int[] {currentX, currentX + 1};
		}

		else if (currentX == board[0].length - 1) {
			nextX = new int[] {currentX - 1, currentX};
		}

		else {
			nextX = new int[] {currentX - 1, currentX, currentX + 1};
		}

		currentY ++;

		for (int newX : nextX) {
			soFar[currentX] = board[currentX][currentY];
			path = getPath(board, newX, currentY, soFar, sum);
		}

		return path ;
	}

}